// Whole-script strict mode syntax
"use strict";

/**
MIT License

Copyright (c) 2022 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
import { deployDefaultDao, takeChainSnapshot, revertChainSnapshot, proposalIdGenerator, expect, expectRevert, web3 } from "../../utils/hh-util";

const {
    unitPrice,
    numberOfUnits,
    maximumChunks,
    maxAmount,
    maxUnits,
    ETH_TOKEN,
    UNITS,
    toBN,
    toWei,
    fromUtf8,
    fromAscii,
    sha3,
    GUILD,
    DAOSQUARE_TREASURY
} = require("../../utils/contract-util");

const { checkBalance } = require("../../utils/test-util");
// const { getConfig } = require("../../migrations/configs/contracts.config");
const hre = require("hardhat");

const remaining = unitPrice.sub(toBN("50000000000000"));
const expectedGuildBalance = toBN("1200000000000000000");
const proposalCounter = proposalIdGenerator().generator;

function getProposalCounter() {
    return proposalCounter().next().value;
}

async function advanceTime(addr1, addr2, token) {

    for (var i = 0; i < 10; i++) {
        await token.transfer(addr2.address, 1);

        await token.connect(addr2).transfer(addr1.address, 1);

    }
}



const getDefaultOptions = (options) => {
    return {
        serviceFeeRatio: 5,
        minFundsForLP: 100,
        minFundsForGP: 1000,
        serviceFeeRatio: 5,
        unitPrice: unitPrice,
        nbUnits: numberOfUnits,
        votingPeriod: 5,
        gracePeriod: 1,
        tokenAddr: ETH_TOKEN,
        maxChunks: maximumChunks,
        maxAmount,
        maxUnits,
        chainId: 1,
        maxExternalTokens: 100,
        couponCreatorAddress: "0x7D8cad0bbD68deb352C33e80fccd4D8e88b4aBb8",
        kycMaxMembers: 1000,
        kycSignerAddress: "0x7D8cad0bbD68deb352C33e80fccd4D8e88b4aBb8",
        kycFundTargetAddress: "0x823A19521A76f80EC49670BE32950900E8Cd0ED3",
        deployTestTokens: true,
        erc20TokenName: "Test Token",
        erc20TokenSymbol: "TTK",
        erc20TokenDecimals: Number(0),
        erc20TokenAddress: UNITS,
        supplyTestToken1: 1000000,
        supplyTestToken2: 1000000,
        supplyPixelNFT: 100,
        supplyOLToken: toBN("1000000000000000000000000"),
        erc1155TestTokenUri: "1155 test token",
        maintainerTokenAddress: UNITS,
        // finalize: options.finalize === undefined || !!options.finalize,
        ...options, // to make sure the options from the tests override the default ones
        gasPriceLimit: "2000000000000",
        spendLimitPeriod: "259200",
        spendLimitEth: "2000000000000000000000",
        feePercent: "110",
        gasFixed: "50000",
        gelato: "0x1000000000000000000000000000000000000000",
    };
};


describe("Rice Mining", () => {
    before("deploy dao", async () => {
        let [owner, user1, user2, project_team1] = await hre.ethers.getSigners();
        this.owner = owner;
        this.user1 = user1;
        this.user2 = user2;
        this.project_team1 = project_team1;
        // console.log(`owner address ${owner.address}; user1 address ${user1.address}; user2 address ${user2.address}`);

        const { dao, adapters, extensions, testContracts } = await deployDefaultDao({
            owner: owner,
        });
        const _rewardsToken = testContracts.testRiceToken.instance;
        const _stakingToken = testContracts.testToken1.instance;
        const fundingpoolAdapter = adapters.fundingpoolAdapter.instance;

        await fundingpoolAdapter.setRewardsDuration(dao.address, 10);
        await fundingpoolAdapter.setRiceTokenAddress(dao.address, _rewardsToken.address);
        await fundingpoolAdapter.registerPotentialNewToken(dao.address, _stakingToken.address);

        _rewardsToken.transfer(extensions.fundingpoolExt.address, hre.ethers.utils.parseEther("100000"));
        console.log(`fundingpoolAdapter rice balance: ${hre.ethers.utils.formatEther((await _rewardsToken.balanceOf(extensions.fundingpoolExt.address)))}`);

        this.adapters = adapters;
        this.extensions = extensions;
        this.dao = dao;
        this.testContracts = testContracts;
        this.snapshotId = await takeChainSnapshot();
    });

    beforeEach(async () => {
        await revertChainSnapshot(this.snapshotId);
        this.snapshotId = await takeChainSnapshot();
    });

    it("should be possible to stake staking Token", async () => {
        const fundingpoolAdapter = this.adapters.fundingpoolAdapter.instance;
        const fundingPoolExt = this.extensions.fundingpoolExt.functions;
        const _rewardsToken = this.testContracts.testRiceToken.instance;
        const _stakingToken = this.testContracts.testToken1.instance;
        const dao = this.dao;
        await _stakingToken.transfer(this.user1.address, hre.ethers.utils.parseEther("100000"));
        console.log("user1 staking Token balance: ", hre.ethers.utils.formatEther(await _stakingToken.balanceOf(this.user1.address)).toString());

        await _stakingToken.connect(this.user1).approve(fundingpoolAdapter.address, hre.ethers.utils.parseEther("100000"));
        await fundingpoolAdapter.connect(this.user1).deposit(dao.address, hre.ethers.utils.parseEther("100000"));
        const stakedBalance = hre.ethers.utils.formatEther((await fundingpoolAdapter.balanceOf(
            dao.address, this.user1.address)));
        console.log("user1 stakedBalance:", stakedBalance);
        expect(parseInt(stakedBalance)).equal(100000 * 95 / 100);
        const totalSupply = hre.ethers.utils.formatEther((await fundingPoolExt.totalSupply())[0]);
        console.log("totalSupply:", totalSupply);
        expect(parseInt(totalSupply)).equal(100000 * 95 / 100);


        await fundingpoolAdapter.notifyRewardAmount(dao.address, hre.ethers.utils.parseEther("100000"));
        let blocktimestamp = (await hre.ethers.provider.getBlock("latest")).timestamp;
        console.log("start reward blocktimestamp", blocktimestamp);
        console.log(`rewardRate: ${await fundingPoolExt.rewardRate()}`);
        console.log(`periodFinish: ${await fundingPoolExt.periodFinish()}`);

        const lastTimeRewardApplicable = await fundingPoolExt.lastTimeRewardApplicable();
        console.log("lastTimeRewardApplicable:", lastTimeRewardApplicable.toString());

        const rewardPerToken = hre.ethers.utils.formatEther((await fundingPoolExt.rewardPerToken())[0]);
        console.log("rewardPerToken:", rewardPerToken);

        const earned = hre.ethers.utils.formatEther((await fundingPoolExt.earned(this.user1.address))[0]);
        console.log("user1  earned reward Token:", earned);

        const rewardForDuration = hre.ethers.utils.formatEther((await fundingPoolExt.getRewardForDuration())[0]);
        console.log("rewardForDuration: ", rewardForDuration);

        console.log("rewardsDuration", (await fundingPoolExt.rewardsDuration()).toString());

    })

    it("should be possible to getReward", async () => {
        const fundingpoolAdapter = this.adapters.fundingpoolAdapter.instance;
        const fundingPoolExt = this.extensions.fundingpoolExt.functions;
        const dao = this.dao;
        const _stakingToken = this.testContracts.testToken1.instance;
        const _rewardsToken = this.testContracts.testRiceToken.instance;

        let earned = hre.ethers.utils.formatEther((await fundingPoolExt.earned(this.user1.address))[0]);
        console.log("user1 earned rice Token:", earned);
        const rewardstokenBalance1 = await _rewardsToken.balanceOf(this.user1.address);
        console.log("rewardstokenBalance1: ", hre.ethers.utils.formatEther(rewardstokenBalance1));
        let pendingRewards = (await fundingPoolExt.rewards(this.user1.address))[0];
        console.log("pendingRewards: ", hre.ethers.utils.formatEther(pendingRewards));
        await advanceTime(this.owner, this.user2, _stakingToken);
        await fundingpoolAdapter.connect(this.user1).claimeRiceReward(dao.address);
        let blocktimestamp = (await hre.ethers.provider.getBlock("latest")).timestamp;
        console.log("getRiceReward blocktimestamp: ", blocktimestamp);
        const rewardstokenBalance2 = await _rewardsToken.balanceOf(this.user1.address);
        console.log("rewardstokenBalance2: ", hre.ethers.utils.formatEther(rewardstokenBalance2));
        earned = hre.ethers.utils.formatEther((await fundingPoolExt.earned(this.user1.address))[0]);
        console.log("user1 earned rice Token:", earned);
        // expect(parseInt(hre.ethers.utils.formatEther((await stakingRewards.balanceOf(this.user1.address))))).equal(
        //     1000 - 100);
    })

    it("should be possible to withdraw funds from the staking pool", async () => {
        const fundingpoolAdapter = this.adapters.fundingpoolAdapter.instance;
        const fundingPoolExt = this.extensions.fundingpoolExt.functions;
        const dao = this.dao;

        await fundingpoolAdapter.connect(this.user1).withdraw(dao.address, hre.ethers.utils.parseEther("100"));
        expect(parseInt(hre.ethers.utils.formatEther((await fundingpoolAdapter.balanceOf(dao.address, this.user1.address))))).equal(
            100000 * 95 / 100 - 100);
    })




});
