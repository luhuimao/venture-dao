// Whole-script strict mode syntax
"use strict";

/**
MIT License

Copyright (c) 2022 DAOSQUARE

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */


import { deployDefaultDao, takeChainSnapshot, revertChainSnapshot, proposalIdGenerator, expect, expectRevert, web3 } from "../../utils/hh-util";
import { ethers } from "hardhat";
const hre = require("hardhat");
const {
    fromUtf8
} = require("../../utils/contract-util");
const proposalCounter = proposalIdGenerator().generator;
function getProposalCounter() {
    return proposalCounter().next().value;
}
async function advanceTime(addr1, addr2, token) {

    for (var i = 0; i < 10; i++) {
        await token.transfer(addr2.address, 1);

        await token.connect(addr2).transfer(addr1.address, 1);

    }
}

describe("Adapter - GPVoting", () => {

    const distributeFundsProposal = async (
        dao,
        distributeFundContract,
        requestedFundAmount,
        tradingOffTokenAmount,
        fullyReleasedDate,
        lockupDate,
        projectTeamAddr,
        projectTeamTokenAddr,
        sender,
        proposalId = null
    ) => {
        const newProposalId = proposalId ? proposalId : getProposalCounter();
        await distributeFundContract.connect(sender).submitProposal(
            dao.address,
            newProposalId,
            [projectTeamAddr, projectTeamTokenAddr],
            [requestedFundAmount, tradingOffTokenAmount, fullyReleasedDate, lockupDate],
            fromUtf8("paying dividends")
        );

        return { proposalId: newProposalId };
    };

    const depositToFundingPool = async (
        fundingpoolAdapter,
        dao,
        investor,
        amount,
        token) => {
        await token.connect(investor).approve(fundingpoolAdapter.address, amount);
        await fundingpoolAdapter.connect(investor).deposit(dao.address, amount);
    };

    before("deploy dao", async () => {
        let [daoOwner, daoMember1, daoMember2, user1, project_team1, gp1, gp2] = await ethers.getSigners();
        const { dao, adapters, extensions, testContracts } = await deployDefaultDao({
            owner: daoOwner,
        });
        this.dao = dao;
        this.adapters = adapters;
        this.extensions = extensions;
        this.daoOwner = daoOwner;
        this.daoMember1 = daoMember1;
        this.daoMember2 = daoMember2;
        this.user1 = user1;
        this.project_team1 = project_team1;
        this.gp1 = gp1;
        this.gp2 = gp2;
        this.gpvoting = this.adapters.gpVotingAdapter.instance;
        this.distributefund = this.adapters.distributeFundAdapter.instance;
        this.fundingpoolAdapter = this.adapters.fundingpoolAdapter.instance;
        this.gpdaoAdapter = this.adapters.gpdaoAdapter.instance;
        this.testtoken1 = testContracts.testToken1.instance
        this.testtoken2 = testContracts.testToken2.instance

        //submite distribute proposal
        const requestedFundAmount = hre.ethers.utils.parseEther("1000");
        const tradingOffTokenAmount = hre.ethers.utils.parseEther("50000");
        let blocktimestamp = (await hre.ethers.provider.getBlock("latest")).timestamp;
        const lockupDate = blocktimestamp + 24;
        const fullyReleasedDate = lockupDate + 1000;
        const projectTeamAddr = this.project_team1.address;
        const projectTeamTokenAddr = this.testtoken2.address;

        await this.fundingpoolAdapter.registerPotentialNewToken(dao.address, this.testtoken1.address);
        await this.testtoken1.transfer(gp1.address, hre.ethers.utils.parseEther("20000"));
        await depositToFundingPool(this.fundingpoolAdapter, dao, this.gp1, hre.ethers.utils.parseEther("20000"), this.testtoken1);
        await this.testtoken2.transfer(this.project_team1.address, tradingOffTokenAmount);
        await this.testtoken2.connect(this.project_team1).approve(this.distributefund.address, tradingOffTokenAmount);

        //register new GP
        await this.gpdaoAdapter.registerNewGP(dao.address, this.gp1.address);
        await this.gpdaoAdapter.registerNewGP(dao.address, this.gp2.address);

        let { proposalId } = await distributeFundsProposal(
            dao,
            this.distributefund,
            requestedFundAmount,
            tradingOffTokenAmount,
            fullyReleasedDate,
            lockupDate,
            projectTeamAddr,
            projectTeamTokenAddr,
            daoOwner
        );
        this.proposalId = proposalId;
    });

    beforeEach(async () => {
        await revertChainSnapshot(this.snapshotId);
        this.snapshotId = await takeChainSnapshot();
    });

    it("should be possible to vote to proposal by GP", async () => {
        // gp1 Vote YES on the proposal
        await this.gpvoting.connect(this.gp1).submitVote(this.dao.address, this.proposalId, 1);

        const voteRel = await this.gpvoting.voteResult(this.dao.address, this.proposalId);
        console.log(`voteResult ${voteRel}`);
    });

    it("update voting weights when voter's balance changed", async () => {
        //withdraw from treasury
        console.log(`voting weight:${await this.gpvoting.voteWeights(this.dao.address, this.proposalId, this.gp1.address)}`);
        await this.fundingpoolAdapter.connect(this.gp1).withdraw(this.dao.address, ethers.utils.parseEther("100"));
        console.log(`voting weight:${await this.gpvoting.voteWeights(this.dao.address, this.proposalId, this.gp1.address)}`);

        await depositToFundingPool(this.fundingpoolAdapter, this.dao, this.gp1, hre.ethers.utils.parseEther("100"), this.testtoken1);
        console.log(`voting weight:${await this.gpvoting.voteWeights(this.dao.address, this.proposalId, this.gp1.address)}`);
    });

    it("should be impossible to vote to proposal by non GP", async () => {
        await expectRevert(this.gpvoting.connect(this.user1).submitVote(this.dao.address, this.proposalId, 1), "revert");
    });

    it("should be possible to revoke vote before voting end", async () => {
        await this.gpvoting.connect(this.gp1).revokeVote(this.dao.address, this.proposalId);
        // console.log(await this.gpvoting.checkIfVoted(this.dao.address, this.proposalId, this.gp1.address));
        // expect(await this.gpvoting.checkIfVoted(this.dao.address, this.proposalId, this.gp1.address)).equal(false);
    });

    it("should be impossible to revoke vote after voting end", async () => {
        await this.gpvoting.connect(this.gp1).submitVote(this.dao.address, this.proposalId, 1);
        await advanceTime(this.daoOwner, this.user1, this.testtoken1);
        await expectRevert(
            this.gpvoting.connect(this.gp1).revokeVote(this.dao.address, this.proposalId),
            "revert"
        );
    });
});
