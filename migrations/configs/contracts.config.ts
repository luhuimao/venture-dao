import {
  collectiveFundingPoolExtensionAclFlagsMap,
  flexFundingPoolExtensionAclFlagsMap,
  vintageFundingPoolExtensionAclFlagsMap,
  daoAccessFlagsMap,
  bankExtensionAclFlagsMap,
  fundingpoolExtensionAclFlagsMap,
  ricestakingExtensionAclFlagsMap,
  gpdaoExtensionAclFlagsMap,
  erc721ExtensionAclFlagsMap,
  erc1155ExtensionAclFlagsMap,
  erc1271ExtensionAclFlagsMap,
  vestingExtensionAclFlagsMap,
  entryFlexFundingPool,
  entryVintageFundingPool,
  entryCollectiveFundingPool,
  entryBank,
  entryRiceStaking,
  entryFundingPool,
  entryGPDao,
  entryERC20,
  entryERC721,
  entryERC1155,
  entryERC1271,
  entryExecutor,
  entryVesting,
  ACLBuilder,
  SelectedACLs,
} from "../../utils/access-control-util";

import { extensionsIdsMap, adaptersIdsMap } from "../../utils/dao-ids-util";
import { governanceRoles } from "../../utils/governance-utils";

// Matches the DaoArtifacts.sol ArtifactType enum
export enum ContractType {
  Core = 0,
  Factory = 1,
  Extension = 2,
  Adapter = 3,
  Util = 4,
  Test = 5,
  Library = 6,
}

/**
 * Each contract contains different configurations that will be required by the deployment
 * script. This type helps you to define these configs.
 */
export type ContractConfig = {
  /**
   * The id of the contract, usually it is imported from dao-ids-util.ts.
   */
  id: string;
  /**
   *  The name of the solidity contract, not the file name, but the contract itself.
   */
  name: string;
  /**
   * The javascript variable name that will be named
   * to access the contract. This is useful for variables
   * that are created during the deployment such as
   * adapters and extension. Using this alias you will be
   * able to access it in the test context,
   * e.g: adapters.<alias> will return the deployed contract.
   */
  alias?: string;
  /**
   * The path to the solidity contract.
   */
  path: string;
  /**
   * If true indicates that the contract must be deployed.
   */
  enabled: boolean;
  /**
   * Optional
   * skip auto deploy true indicates that the contract do need to be
   * automatically deployed during the migration script execution.
   * It is useful to skip the auto deploy for contracts that are not required
   * to launch a DAO, but that you manually configure them after the DAO is created,
   * but not finalized, e.g: Offchain Voting.
   */
  skipAutoDeploy?: boolean;
  /**
   * Version of the solidity contract.
   * It needs to be the name of the contract, and not the name of the .sol file.
   */
  version: string;
  /**
   * Type of the contract based on the ContractType enum.
   */
  type: ContractType;
  /**
   * The Access Control Layer flags selected to be granted to this contract in the DAO.
   */
  acls: SelectedACLs;
  /**
   * Optional
   * The function that computes the correct ACL value based on the selected ACL flags.
   */
  buildAclFlag?: ACLBuilder;
  /**
   * Optional
   * A contract may need custom arguments during the deployment time,
   * declare here all the arguments that are read from the env,
   * and passed to the configuration/deployment functions.
   * The names of the arguments must match the arguments provided
   * in the deployment script 2_deploy_contracts.js
   */
  deploymentArgs?: Array<string>;
  /**
   * Optional
   * Set of arguments to be passed to the `configureDao` call
   * after the contract has been deployment.
   */
  daoConfigs?: Array<Array<string>>;
  /**
   * Optional
   * The id of the extension generated by the factory, usually you will import that from extensionsIdsMap.
   * e.g: a BankFactory generates instances of contract BankContract, so the BankFactory config needs to
   * set the extensionsIdsMap.BANK_EXT in this attribute to indicate it generates bank contracts.
   */
  generatesExtensionId?: string;

  /**
   * Optional
   * The governanceRole attribute indicates which DAO configuration needs to be considered when evaluating votes
   * from members of the DAOs. e.g: a Configuration adapter restricts the voting rights to members that hold a particular
   * token, and the token is defined via governance role configuration. If the member does not hold that don't, the vote
   * doesn't go through.
   */
  governanceRoles?: Record<string, string>;
};

export const contracts: Array<ContractConfig> = [
  /**
   * Test Util Contracts
   */
  {
    id: "ol-token",
    name: "OLToken",
    path: "../../contracts/test/OLToken",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["supplyOLToken"],
  },
  {
    id: "weth",
    name: "WETH",
    path: "../../contracts/helpers/WETH",
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: [],
  },
  {
    id: "mock-dao",
    name: "MockDao",
    path: "../../contracts/test/MockDao",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "test-token-1",
    name: "TestToken1",
    alias: "testToken1",
    path: "../../contracts/test/TestToken1",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["supplyTestToken1"],
  },
  {
    id: "test-token-2",
    name: "TestToken2",
    alias: "testToken2",
    path: "../../contracts/test/TestToken2",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["supplyTestToken2"],
  },
  {
    id: "test-rice-token",
    name: "TestRiceToken",
    alias: "testRiceToken",
    path: "../../contracts/test/TestRiceToken",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["supplyTestRiceToken"],
  },
  {
    id: "test-fairshare-calc",
    name: "TestFairShareCalc",
    path: "../../contracts/test/TestFairShareCalc",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "pixel-nft",
    name: "PixelNFT",
    alias: "pixelNFT",
    path: "../../contracts/test/PixelNFT",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["supplyPixelNFT"],
  },
  {
    id: "prox-token",
    name: "ProxTokenContract",
    alias: "proxToken",
    path: "../../contracts/test/ProxTokenContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "erc20-minter",
    name: "ERC20MinterContract",
    path: "../../contracts/test/ERC20MinterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "erc1155-test-token",
    name: "ERC1155TestToken",
    alias: "erc1155TestToken",
    path: "../../contracts/test/ERC1155TestToken",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Test,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["erc1155TestTokenUri"],
  },

  /**
   * DAO Factories Contracts
   */
  {
    id: "dao-factory",
    name: "DaoFactory",
    path: "../../contracts/core/DaoFactory",
    enabled: true,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    generatesExtensionId: "dao-registry",
  },
  {
    id: "dao-registry",
    name: "DaoRegistry",
    path: "../../contracts/core/DaoRegistry",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Core,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "nft-collection-factory",
    name: "NFTCollectionFactory",
    alias: "erc721ExtFactory",
    path: "../../contracts/extensions/NFTCollectionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.ERC721_EXT,
  },
  {
    id: "bank-factory",
    name: "BankFactory",
    alias: "bankExtFactory",
    path: "../../contracts/extensions/bank/BankFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress", "maxExternalTokens"],
    generatesExtensionId: extensionsIdsMap.BANK_EXT,
  },
  {
    id: "funding-pool-factory",
    name: "FundingPoolFactory",
    alias: "fundingPoolExtFactory",
    path: "../../contracts/extensions/fundingpool/FundingPoolFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.FUNDING_POOL_EXT,
  },
  {
    id: "collective-funding-pool-factory",
    name: "CollectiveFundingPoolFactory",
    alias: "collectiveFundingPoolFactory",
    path: "../../contracts/flex/extensions/CollectiveFundingPoolFactory",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT,
  },
  {
    id: "flex-funding-pool-factory",
    name: "FlexFundingPoolFactory",
    alias: "flexFundingPoolFactory",
    path: "../../contracts/flex/extensions/FlexFundingPoolFactory",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.FLEX_FUNDING_POOL_EXT,
  },
  {
    id: "vintage-funding-pool-factory",
    name: "VintageFundingPoolFactory",
    alias: "vintageFundingPoolFactory",
    path: "../../contracts/flex/extensions/VintageFundingPoolFactory",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.VINTAGE_FUNDING_POOL_EXT,
  },
  {
    id: "rice-staking-factory",
    name: "RiceStakingFactory",
    alias: "riceStakingExtFactory",
    path: "../../contracts/extensions/ricestaking/RiceStakingFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.RICE_STAKING_EXT,
  },
  {
    id: "gp-dao-factory",
    name: "GPDaoFactory",
    alias: "gpDaoExtFactory",
    path: "../../contracts/extensions/gpdao/GPDaoFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.GP_DAO_EXT,
  },
  {
    id: "erc20-extension-factory",
    name: "ERC20TokenExtensionFactory",
    alias: "erc20ExtFactory",
    path: "../../contracts/extensions/token/erc20/ERC20TokenExtensionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: [
      "daoAddress",
      "erc20TokenName",
      "erc20TokenAddress",
      "erc20TokenSymbol",
      "erc20TokenDecimals",
    ],
    generatesExtensionId: extensionsIdsMap.ERC20_EXT,
  },
  {
    id: "vesting-extension-factory",
    name: "InternalTokenVestingExtensionFactory",
    alias: "vestingExtFactory",
    path: "../../contracts/extensions/token/erc20/InternalTokenVestingExtensionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.VESTING_EXT,
  },
  {
    id: "erc1271-extension-factory",
    name: "ERC1271ExtensionFactory",
    alias: "erc1271ExtFactory",
    path: "../../contracts/extensions/erc1271/ERC1271ExtensionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.ERC1271_EXT,
  },
  {
    id: "executor-extension-factory",
    name: "ExecutorExtensionFactory",
    alias: "executorExtFactory",
    path: "../../contracts/extensions/executor/ExecutorExtensionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.EXECUTOR_EXT,
  },
  {
    id: "erc1155-extension-factory",
    name: "ERC1155TokenCollectionFactory",
    alias: "erc1155ExtFactory",
    path: "../../contracts/extensions/erc1155/ERC1155TokenCollectionFactory",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Factory,
    acls: {
      dao: [],
      extensions: {},
    },
    deploymentArgs: ["daoAddress"],
    generatesExtensionId: extensionsIdsMap.ERC1155_EXT,
  },
  /**
   * Extensions
   */
  {
    id: extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT,
    name: "CollectiveInvestmentPoolExtension",
    alias: "collectiveInvestmentPoolExtension",
    path: "../../contracts/vintage/extensions/CollectiveInvestmentPoolExtension",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryCollectiveFundingPool,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.VINTAGE_FUNDING_POOL_EXT,
    name: "VintageFundingPoolExtension",
    alias: "vintageFundingPoolExt",
    path: "../../contracts/vintage/extensions/VintageFundingPoolExtension",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryVintageFundingPool,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.FLEX_FUNDING_POOL_EXT,
    name: "FlexInvestmentPoolExtension",
    alias: "flexFundingPoolExt",
    path: "../../contracts/flex/extensions/FlexInvestmentPoolExtension",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryFlexFundingPool,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.ERC721_EXT,
    name: "NFTExtension",
    alias: "erc721Ext",
    path: "../../contracts/extensions/nft/NFTExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryERC721,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.BANK_EXT,
    name: "BankExtension",
    alias: "bankExt",
    path: "../../contracts/extensions/bank/BankExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryBank,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.FUNDING_POOL_EXT,
    name: "FundingPoolExtension",
    alias: "fundingpoolExt",
    path: "../../contracts/extensions/fundingpool/FundingPoolExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryFundingPool,
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.RICE_STAKING_EXT,
    name: "StakingRiceExtension",
    alias: "ricestakingExt",
    path: "../../contracts/extensions/ricestaking/StakingRiceExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryRiceStaking,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.GP_DAO_EXT,
    name: "GPDaoExtension",
    alias: "gpDaoExt",
    path: "../../contracts/extensions/gpdao/GPDaoExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryGPDao,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.FUNDING_POOL_EXT]: [fundingpoolExtensionAclFlagsMap.UPDATE_GP_BALANCE,],
      },
    },
  },
  {
    id: extensionsIdsMap.ERC20_EXT,
    name: "ERC20Extension",
    alias: "erc20Ext",
    path: "../../contracts/extensions/token/erc20/ERC20Extension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryERC20,
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
      },
    },
  },
  {
    id: extensionsIdsMap.VESTING_EXT,
    name: "InternalTokenVestingExtension",
    alias: "vestingExt",
    path: "../../contracts/extensions/token/erc20/InternalTokenVestingExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryVesting,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.ERC1271_EXT,
    name: "ERC1271Extension",
    alias: "erc1271Ext",
    path: "../../contracts/extensions/erc1271/ERC1271Extension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryERC1271,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.EXECUTOR_EXT,
    name: "ExecutorExtension",
    alias: "executorExt",
    path: "../../contracts/extensions/executor/ExecutorExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryExecutor,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: extensionsIdsMap.ERC1155_EXT,
    name: "ERC1155TokenExtension",
    alias: "erc1155Ext",
    path: "../../contracts/extensions/erc1155/ERC1155TokenExtension",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Extension,
    buildAclFlag: entryERC1155,
    acls: {
      dao: [],
      extensions: {},
    },
  },

  /**
   * Adapters
   */

  // vintage
  {
    id: adaptersIdsMap.SUMMON_VINTAGE_DAO,
    name: "SummonVintageDao",
    alias: "summonVintageDao",
    path: "../../contracts/adapters/SummonVintageDao",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FUNDING_POOL_ADAPTER,
    name: "VintageFundingPoolAdapterContract",
    alias: "vintageFundingPoolAdapterContract",
    path: "../../contracts/adapters/VintageFundingPoolAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SET_CONFIGURATION,
      ],
      extensions: {
        [extensionsIdsMap.VINTAGE_FUNDING_POOL_EXT]: [
          vintageFundingPoolExtensionAclFlagsMap.WITHDRAW,
          vintageFundingPoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          vintageFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
          vintageFundingPoolExtensionAclFlagsMap.ADD_TO_BALANCE,
          vintageFundingPoolExtensionAclFlagsMap.UPDATE_TOKEN,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_VOTING,
    name: "VintageVotingContract",
    alias: "vintageVotingContract",
    path: "../../contracts/adapters/VintageVotingContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_RAISER_MANAGEMENT,
    name: "VintageRaiserManagementContract",
    alias: "vintageRaiserManagementContract",
    path: "../../contracts/adapters/VintageRaiserManagementContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.NEW_MEMBER,
        daoAccessFlagsMap.REMOVE_MEMBER,
        daoAccessFlagsMap.INCREASE_GOVENOR_IN_ID,
        daoAccessFlagsMap.INCREASE_GOVENOR_OUT_ID],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FUND_RAISE,
    name: "VintageFundRaiseAdapterContract",
    alias: "vintageFundRaiseAdapter",
    path: "../../contracts/adapters/VintageFundRaiseAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_NEW_FUND_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_VESTING_ADAPTER,
    name: "VintageVesting",
    alias: "vintageVesting",
    path: "../../contracts/adapters/VintageVesting",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_ALLOCATION_ADAPTER,
    name: "VintageAllocationAdapterContract",
    alias: "vintageAllocationAdapterContract",
    path: "../../contracts/adapters/VintageAllocationAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FUNDING_ADAPTER,
    name: "VintageFundingAdapterContract",
    alias: "vintageFundingAdapterContract",
    path: "../../contracts/adapters/VintageFundingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    deploymentArgs: ["vintageInvestmentLibraryAddress"],
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_VOTE_TYPE,
        daoAccessFlagsMap.INCREASE_FUNDING_ID
      ],
      extensions: {
        [extensionsIdsMap.VINTAGE_FUNDING_POOL_EXT]: [
          vintageFundingPoolExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
          vintageFundingPoolExtensionAclFlagsMap.WITHDRAW,
          vintageFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
        ],
      },
    }
  },
  {
    id: adaptersIdsMap.VINTAGE_SUMMON_DAO,
    name: "SummonVintageDao",
    alias: "summonVintageDao",
    path: "../../contracts/adapters/SummonVintageDao",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_ESCROW_FUND_ADAPTER,
    name: "VintageEscrowFundAdapterContract",
    alias: "vintageEscrowFundAdapterContract",
    path: "../../contracts/adapters/VintageEscrowFundAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_DISTRIBUTE_ADAPTER,
    name: "VintageDistributeAdatperContract",
    alias: "vintageDistributeAdatperContract",
    path: "../../contracts/adapters/VintageDistributeAdatperContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.VINTAGE_FUNDING_POOL_EXT]: [
          vintageFundingPoolExtensionAclFlagsMap.WITHDRAW,
          vintageFundingPoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          vintageFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_RAISER_ALLOCATION,
    name: "VintageRaiserAllocationAdapter",
    alias: "vintageRaiserAllocationAdapter",
    path: "../../contracts/adapters/VintageRaiserAllocationAdapter",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FUNDING_RETURN_TOKEN_ADAPTER,
    name: "VintageFundingReturnTokenAdapterContract",
    alias: "vintageFundingReturnTokenAdapterContract",
    path: "../../contracts/adapters/VintageInvestmentPaybackTokenAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FREE_IN_ESCORW_FUND_ADAPTER,
    name: "VintageFreeInEscrowFundAdapterContract",
    alias: "vintageFreeInEscrowFundAdapterContract",
    path: "../../contracts/adapters/VintageFreeInEscrowFundAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_FUNDING_POOL_ADAPTER_HELPER,
    name: "VintageFundingPoolAdapterHelperContract",
    alias: "vintageFundingPoolAdapterHelperContract",
    path: "../../contracts/adapters/VintageFundingPoolAdapterHelperContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_DAOSET_ADAPTER,
    name: "VintageDaoSetAdapterContract",
    alias: "vintageDaoSetAdapterContract",
    path: "../../contracts/adapters/VintageDaoSetAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_INVESTOR_CAP_ID,
        daoAccessFlagsMap.INCREASE_GOVERNOR_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_INVESTOR_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_VOTING_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_DAOSET_HELPER_ADAPTER,
    name: "VintageDaoSetHelperAdapterContract",
    alias: "vintageDaoSetHelperAdapterContract",
    path: "../../contracts/adapters/VintageDaoSetHelperAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SET_CONFIGURATION
      ],
      extensions: {
      },
    },
  },
  /***********************************vintage end********************************/
  // flex
  {
    id: adaptersIdsMap.FLEX_STEWARD_MANAGEMENT,
    name: "StewardManagementContract",
    alias: "stewardManagementContract",
    path: "../../contracts/adapters/StewardManagementContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.NEW_MEMBER,
        daoAccessFlagsMap.REMOVE_MEMBER,
        daoAccessFlagsMap.INCREASE_GOVENOR_IN_ID,
        daoAccessFlagsMap.INCREASE_GOVENOR_OUT_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_POLLING_VOTING,
    name: "FlexPollingVotingContract",
    alias: "flexPollingVotingContract",
    path: "../../contracts/adapters/FlexPollingVotingContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.SUMMON_DAO,
    name: "SummonDao",
    alias: "summonDao",
    path: "../../contracts/adapters/SummonDao",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.REMOVE_MEMBER],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_VESTING,
    name: "FlexVesting",
    alias: "flexVesting",
    path: "../../contracts/adapters/FlexVesting",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_ERC721_ADAPT,
    name: "FlexERC721",
    alias: "flexERC721",
    path: "../../contracts/adapters/FlexERC721",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_ALLOCATION_ADAPT,
    name: "FlexAllocationAdapterContract",
    alias: "flexAllocationAdapterContract",
    path: "../../contracts/adapters/FlexAllocationAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_FUNDING_POOL_ADAPTER,
    name: "FlexInvestmentPoolAdapterContract",
    alias: "flexFundingPoolAdapterContract",
    path: "../../contracts/adapters/FlexInvestmentPoolAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.FLEX_FUNDING_POOL_EXT]: [
          flexFundingPoolExtensionAclFlagsMap.WITHDRAW,
          flexFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
          flexFundingPoolExtensionAclFlagsMap.ADD_TO_BALANCE,
          flexFundingPoolExtensionAclFlagsMap.UPDATE_TOKEN,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_VOTING,
    name: "FlexVotingContract",
    alias: "flexVotingContract",
    path: "../../contracts/adapters/FlexVotingContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_FUNDING,
    name: "FlexFundingAdapterContract",
    alias: "flexFundingAdapterContract",
    path: "../../contracts/adapters/FlexFundingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE, daoAccessFlagsMap.INCREASE_FUNDING_ID],
      extensions: {
        [extensionsIdsMap.FLEX_FUNDING_POOL_EXT]: [
          flexFundingPoolExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
          flexFundingPoolExtensionAclFlagsMap.WITHDRAW,
          flexFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
        ],
      },
    },
    // daoConfigs: [["daoAddress", "flexFundingType"]],
  },
  {
    id: adaptersIdsMap.BEN_TO_BOX,
    name: "BentoBoxV1",
    alias: "bentoBoxV1",
    path: "../../contracts/adapters/BentoBoxV1",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_STEWARD_ALLOCATION_ADAPT,
    name: "FlexStewardAllocationAdapter",
    alias: "flexStewardAllocation",
    path: "../../contracts/adapters/FlexStewardAllocationAdapter",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_FUNDING_RETURN_TOKEN_ADAPT,
    name: "FlexInvestmentPaybackTokenAdapterContract",
    alias: "flexFundingReturnTokenAdapterContract",
    path: "../../contracts/adapters/FlexInvestmentPaybackTokenAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_FREE_IN_ESCROW_FUND_ADAPTER,
    name: "FlexFreeInEscrowFundAdapterContract",
    alias: "flexFreeInEscrowFundAdapterContract",
    path: "../../contracts/adapters/FlexFreeInEscrowFundAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_FUNDING_HELPER_ADAPTER,
    name: "FlexFundingHelperAdapterContract",
    alias: "flexFundingHelperAdapterContract",
    path: "../../contracts/adapters/FlexFundingHelperAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_ADAPTER,
    name: "FlexDaoSetAdapterContract",
    alias: "flexDaoSetAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_INVESTOR_CAP_ID,
        daoAccessFlagsMap.INCREASE_GOVERNOR_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_INVESTOR_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_FEE_ID,
        daoAccessFlagsMap.INCREASE_PROPOSER_MEMBERSHIP_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_HELPER_ADAPTER,
    name: "FlexDaoSetHelperAdapterContract",
    alias: "flexDaoSetHelperAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetHelperAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SET_CONFIGURATION
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_FEES_ADAPTER,
    name: "FlexDaoSetFeesAdapterContract",
    alias: "flexDaoSetFeesAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetFeesAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_FEE_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_GOVERNOR_MEMBERSHIP_ADAPTER,
    name: "FlexDaoSetGovernorMembershipAdapterContract",
    alias: "flexDaoSetGovernorMembershipAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetGovernorMembershipAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_GOVERNOR_MEMBERSHIP_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_INVESTOR_CAP_ADAPTER,
    name: "FlexDaoSetInvestorCapAdapterContract",
    alias: "flexDaoSetInvestorCapAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetInvestorCapAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_INVESTOR_CAP_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_INVESTOR_MEMBERSHIP_ADAPTER,
    name: "FlexDaoSetInvestorMembershipAdapterContract",
    alias: "flexDaoSetInvestorMembershipAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetInvestorMembershipAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_INVESTOR_MEMBERSHIP_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_POLLING_ADAPTER,
    name: "FlexDaoSetPollingAdapterContract",
    alias: "flexDaoSetPollingAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetPollingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_POLL_FOR_INVESTMENT_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_PROPOSER_MEMBERSHIP_ADAPTER,
    name: "FlexDaoSetProposerMembershipAdapterContract",
    alias: "flexDaoSetProposerMembershipAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetProposerMembershipAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_PROPOSER_MEMBERSHIP
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_DAO_SET_VOTING_ADAPTER,
    name: "FlexDaoSetVotingAdapterContract",
    alias: "flexDaoSetVotingAdapterContract",
    path: "../../contracts/adapters/FlexDaoSetVotingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_VOTING_ID
      ],
      extensions: {
      },
    },
  },
  /*****************************************************flex end*******************************************************/
  /*****************************************************collective*******************************************************/
  {
    id: adaptersIdsMap.SUMMON_COLLECTIVE_DAO,
    name: "SummonCollectiveDao",
    alias: "summonCollectiveDao",
    path: "../../contracts/adapters/SummonCollectiveDao",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.REMOVE_MEMBER],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_GOVERNOR_MANAGEMENT,
    name: "ColletiveGovernorManagementAdapterContract",
    alias: "colletiveGovernorManagementContract",
    path: "../../contracts/adapters/ColletiveGovernorManagementAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.NEW_MEMBER,
        daoAccessFlagsMap.REMOVE_MEMBER,
        daoAccessFlagsMap.INCREASE_GOVENOR_IN_ID,
        daoAccessFlagsMap.INCREASE_GOVENOR_OUT_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_DAO_SET_ADAPTER,
    name: "ColletiveDaoSetProposalAdapterContract",
    alias: "colletiveDaoSetProposalContract",
    path: "../../contracts/adapters/ColletiveDaoSetProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_INVESTOR_CAP_ID,
        daoAccessFlagsMap.INCREASE_GOVERNOR_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_FEE_ID,
        daoAccessFlagsMap.INCREASE_PROPOSER_MEMBERSHIP_ID,
        daoAccessFlagsMap.INCREASE_PROPOSER_REWARD_ID,
        daoAccessFlagsMap.INCREASE_VOTING_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_FUNDING_ADAPTER,
    name: "ColletiveFundingProposalAdapterContract",
    alias: "colletiveFundingProposalContract",
    path: "../../contracts/adapters/ColletiveFundingProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE, daoAccessFlagsMap.INCREASE_FUNDING_ID],
      extensions: {
        [extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT]: [
          collectiveFundingPoolExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
          collectiveFundingPoolExtensionAclFlagsMap.WITHDRAW,
          collectiveFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_VOTING_ADAPTER,
    name: "CollectiveVotingAdapterContract",
    alias: "collectiveVotingContract",
    path: "../../contracts/adapters/CollectiveVotingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_FUNDING_POOL_ADAPTER,
    name: "ColletiveFundingPoolAdapterContract",
    alias: "colletiveFundingPoolContract",
    path: "../../contracts/adapters/ColletiveFundingPoolAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.NEW_MEMBER,
        daoAccessFlagsMap.REMOVE_MEMBER
      ],
      extensions: {
        [extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT]: [
          collectiveFundingPoolExtensionAclFlagsMap.WITHDRAW,
          collectiveFundingPoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          collectiveFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
          collectiveFundingPoolExtensionAclFlagsMap.ADD_TO_BALANCE,
          collectiveFundingPoolExtensionAclFlagsMap.UPDATE_TOKEN,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_FUND_RAISE_ADAPTER,
    name: "ColletiveFundRaiseProposalAdapterContract",
    alias: "colletiveFundRaiseProposalContract",
    path: "../../contracts/adapters/ColletiveFundRaiseProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_NEW_FUND_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_PAYBACK_TOKEN_ADAPTER,
    name: "CollectivePaybackTokenAdapterContract",
    alias: "collectivePaybackTokenAdapterContract",
    path: "../../contracts/adapters/CollectivePaybackTokenAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_ALLOCATION_ADAPTER,
    name: "CollectiveAllocationAdapterContract",
    alias: "collectiveAllocationAdapterContract",
    path: "../../contracts/adapters/CollectiveAllocationAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_DISTRIBUTE_ADAPTER,
    name: "CollectiveDistributeAdatperContract",
    alias: "collectiveDistributeAdatperContract",
    path: "../../contracts/adapters/CollectiveDistributeAdatperContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT]: [
          collectiveFundingPoolExtensionAclFlagsMap.WITHDRAW,
          collectiveFundingPoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          collectiveFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_TOP_UP_ADAPTER,
    name: "ColletiveTopUpProposalAdapterContract",
    alias: "colletiveTopUpProposalContract",
    path: "../../contracts/adapters/ColletiveTopUpProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.INCREASE_TOPUP_ID
      ],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_ENPENSE_ADAPTER,
    name: "ColletiveExpenseProposalAdapterContract",
    alias: "colletiveExpenseProposalContract",
    path: "../../contracts/adapters/ColletiveExpenseProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_EXPENSE_ID
      ],
      extensions: {
        [
          extensionsIdsMap.COLLECTIVE_FUNDING_POOL_EXT
        ]:
          [
            collectiveFundingPoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
            collectiveFundingPoolExtensionAclFlagsMap.SUB_FROM_BALANCE
          ],
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_VESTING_ADAPTER,
    name: "CollectiveVestingAdapterContract",
    alias: "collectiveVestingContract",
    path: "../../contracts/adapters/CollectiveVestingAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_ESCROW_FUND_ADAPTER,
    name: "CollectiveEscrowFundAdapterContract",
    alias: "collectiveEscrowFundAdapterContract",
    path: "../../contracts/adapters/CollectiveEscrowFundAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_FREE_IN_ESCROW_FUND_ADAPTER,
    name: "CollectiveFreeInEscrowFundAdapterContract",
    alias: "collectiveFreeInEscrowFundAdapterContract",
    path: "../../contracts/adapters/CollectiveFreeInEscrowFundAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_CLEAR_FUND_ADAPTER,
    name: "ColletiveClearFundProposalAdapterContract",
    alias: "colletiveClearFundProposalAdapterContract",
    path: "../../contracts/adapters/ColletiveClearFundProposalAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_CLEAR_FUND_ID],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.COLLECTIVE_REDEMPTION_FEE_ESCROW_ADAPTER,
    name: "CollectiveRedemptionFeeEscrowAdapterContract",
    alias: "collectiveRedemptionFeeEscrowAdapterContract",
    path: "../../contracts/adapters/CollectiveRedemptionFeeEscrowAdapterContract",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
        daoAccessFlagsMap.INCREASE_CLEAR_FUND_ID],
      extensions: {
      },
    },
  },
  /*****************************************************collective end*******************************************************/

  {
    id: adaptersIdsMap.VESTING,
    name: "FuroVesting",
    alias: "furoVesting",
    path: "../../contracts/adapters/FuroVesting",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FUND_RAISE,
    name: "FundRaiseAdapterContract",
    alias: "fundRaiseAdapter",
    path: "../../contracts/adapters/FundRaiseAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_CONFIGURATION],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.GP_KICK_ADAPTER,
    name: "GPKickAdapterContract",
    alias: "gpKickAdapter",
    path: "../../contracts/adapters/GPKickAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
        [extensionsIdsMap.GP_DAO_EXT]: [
          gpdaoExtensionAclFlagsMap.REMOVE_GP,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.GP_DAO_ONBOARDING_ADAPTER,
    name: "GPDaoOnboardingAdapterContract",
    alias: "gpDaoOnboardingAdapter",
    path: "../../contracts/adapters/GPDaoOnboardingAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
        [extensionsIdsMap.GP_DAO_EXT]: [
          gpdaoExtensionAclFlagsMap.REGISTER_NEW_GP,
        ],
      },
    },
    // daoConfigs: [["daoAddress", "quorum", "sumperMajority"]],
  },
  {
    id: adaptersIdsMap.DAO_REGISTRY_ADAPTER,
    name: "DaoRegistryAdapterContract",
    alias: "daoRegistryAdapter",
    path: "../../contracts/adapters/DaoRegistryAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.UPDATE_DELEGATE_KEY],
      extensions: {},
    },
  },
  {
    id: adaptersIdsMap.BANK_ADAPTER,
    name: "BankAdapterContract",
    alias: "bankAdapter",
    path: "../../contracts/adapters/BankAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.WITHDRAW,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.UPDATE_TOKEN,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.FOUNDING_POOL_ADAPTER,
    name: "FundingPoolAdapterContract",
    alias: "fundingpoolAdapter",
    path: "../../contracts/adapters/FundingPoolAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.FUNDING_POOL_EXT]: [
          fundingpoolExtensionAclFlagsMap.WITHDRAW,
          fundingpoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
          fundingpoolExtensionAclFlagsMap.ADD_TO_BALANCE,
          fundingpoolExtensionAclFlagsMap.UPDATE_TOKEN,
          fundingpoolExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
          fundingpoolExtensionAclFlagsMap.GET_REWARDS,
          fundingpoolExtensionAclFlagsMap.NOTIFY_REWARD_AMOUNT,
          fundingpoolExtensionAclFlagsMap.RECOVER_ERC20,
          fundingpoolExtensionAclFlagsMap.SET_REWARDS_DURATION,
          fundingpoolExtensionAclFlagsMap.SET_RICE_ADDRESS,
          fundingpoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.RICE_STAKING_ADAPTER,
    name: "RiceStakingAdapterContract",
    alias: "ricestakingAdapter",
    path: "../../contracts/adapters/RiceStakingAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.RICE_STAKING_EXT]: [
          ricestakingExtensionAclFlagsMap.WITHDRAW,
          ricestakingExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.GP_DAO_ADAPTER,
    name: "GPDaoAdapterContract",
    alias: "gpdaoAdapter",
    path: "../../contracts/adapters/GPDaoAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.GP_DAO_EXT]: [
          gpdaoExtensionAclFlagsMap.REMOVE_GP,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.STREAMING_PAYMENT_ADAPTER,
    name: "Sablier",
    alias: "sablierAdapter",
    path: "../../contracts/adapters/streaming_payment/Sablier",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.MANAGE_MEMBER_ADAPTER,
    name: "ManageMemberAdapterContract",
    alias: "manageMemberAdapter",
    path: "../../contracts/adapters/ManageMemberAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER, daoAccessFlagsMap.REMOVE_MEMBER],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.DISTRIBUTE_FUND_ADAPTER,
    name: "DistributeFundContract",
    alias: "distributeFundAdapter",
    path: "../../contracts/adapters/DistributeFundContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_CONFIGURATION],
      extensions: {
        [extensionsIdsMap.FUNDING_POOL_EXT]: [
          fundingpoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_SNAP_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_PROJECT_SNAP_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_PROJECT_SNAP_RICE,
          fundingpoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
        ],
        [extensionsIdsMap.RICE_STAKING_EXT]: [
          ricestakingExtensionAclFlagsMap.SET_PROJECT_SNAP_RICE,
        ],
      },
    },
    daoConfigs: [],
  },
  {
    id: adaptersIdsMap.DISTRIBUTE_FUND_ADAPTERV2,
    name: "DistributeFundContractV2",
    alias: "distributeFundAdapterv2",
    path: "../../contracts/adapters/DistributeFundContractV2",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.SET_CONFIGURATION, daoAccessFlagsMap.SET_VOTE_TYPE],
      extensions: {
        [extensionsIdsMap.FUNDING_POOL_EXT]: [
          fundingpoolExtensionAclFlagsMap.DISTRIBUTE_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_SNAP_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_PROJECT_SNAP_FUNDS,
          fundingpoolExtensionAclFlagsMap.SET_PROJECT_SNAP_RICE,
          fundingpoolExtensionAclFlagsMap.SUB_FROM_BALANCE,
        ],
        [extensionsIdsMap.RICE_STAKING_EXT]: [
          ricestakingExtensionAclFlagsMap.SET_PROJECT_SNAP_RICE,
        ],
      },
    },
    // daoConfigs: [["daoAddress", "proposalDuration", "proposalInterval", "proposalExecuteDurantion"]],
  },
  {
    id: adaptersIdsMap.CONFIGURATION_ADAPTER,
    name: "ConfigurationContract",
    alias: "configuration",
    path: "../../contracts/adapters/ConfigurationContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.SET_CONFIGURATION,
      ],
      extensions: {},
    },
    governanceRoles: {
      [governanceRoles.ONLY_GOVERNOR]: "maintainerTokenAddress",
    },
  },
  {
    id: adaptersIdsMap.ERC1155_ADAPTER,
    name: "ERC1155AdapterContract",
    alias: "erc1155Adapter",
    path: "../../contracts/adapters/ERC1155AdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.ERC721_EXT]: [
          erc721ExtensionAclFlagsMap.COLLECT_NFT,
          erc721ExtensionAclFlagsMap.WITHDRAW_NFT,
          erc721ExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
        [extensionsIdsMap.ERC1155_EXT]: [
          erc1155ExtensionAclFlagsMap.COLLECT_NFT,
          erc1155ExtensionAclFlagsMap.WITHDRAW_NFT,
          erc1155ExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.MANAGING_ADAPTER,
    name: "ManagingContract",
    alias: "managing",
    path: "../../contracts/adapters/ManagingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.REPLACE_ADAPTER,
        daoAccessFlagsMap.ADD_EXTENSION,
        daoAccessFlagsMap.REMOVE_EXTENSION,
        daoAccessFlagsMap.SET_CONFIGURATION,
      ],
      extensions: {},
    },
    governanceRoles: {
      [governanceRoles.ONLY_GOVERNOR]: "maintainerTokenAddress",
    },
  },

  // Signature Adapters
  {
    id: adaptersIdsMap.ERC1271_ADAPTER,
    name: "SignaturesContract",
    alias: "signatures",
    path: "../../contracts/adapters/SignaturesContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL],
      extensions: {
        [extensionsIdsMap.ERC1271_EXT]: [erc1271ExtensionAclFlagsMap.SIGN],
      },
    },
  },
  // gp onborad voting adapter
  {
    id: adaptersIdsMap.GP_ONBOARD_VOTING_ADAPTER,
    name: "GPOnboardVotingContract",
    alias: "gpOnboardVotingAdapter",
    path: "../../contracts/adapters/GPOnboardVotingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SET_CONFIGURATION,],
      extensions: {},
    },
    // daoConfigs: [["daoAddress", "votingPeriod", "gracePeriod"]],
  },
  // Voting Adapters
  {
    id: adaptersIdsMap.VOTING_ADAPTER,
    name: "VotingContract",
    alias: "voting",
    path: "../../contracts/adapters/VotingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SET_CONFIGURATION,],
      extensions: {},
    },
    daoConfigs: [["daoAddress", "votingPeriod", "gracePeriod"]],
  },
  {
    id: adaptersIdsMap.GPVOTING_ADAPTER,
    name: "GPVotingContract",
    alias: "gpVotingAdapter",
    path: "../../contracts/adapters/voting/GPVotingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SET_CONFIGURATION,],
      extensions: {},
    },
    // daoConfigs: [["daoAddress", "votingPeriod", "gracePeriod"]],
  },
  {
    id: adaptersIdsMap.ALLOCATION_ADAPTER,
    name: "AllocationAdapterContract",
    alias: "allocation",
    path: "../../contracts/adapters/AllocationAdapterContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SET_CONFIGURATION,],
      extensions: {},
    },
    daoConfigs: [["daoAddress", "gpAllocationBonusRadio", "riceStakeAllocationRadio"]],
  },
  {
    id: adaptersIdsMap.ALLOCATION_ADAPTERV2,
    name: "AllocationAdapterContractV2",
    alias: "allocationv2",
    path: "../../contracts/adapters/AllocationAdapterContractV2",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SET_CONFIGURATION,],
      extensions: {},
    },
    // daoConfigs: [["daoAddress", "gpAllocationBonusRadio", "riceStakeAllocationRadio"]],
  },
  {
    id: adaptersIdsMap.SNAPSHOT_PROPOSAL_ADAPTER,
    name: "SnapshotProposalContract",
    alias: "snapshotProposalAdapter",
    path: "../../contracts/adapters/voting/SnapshotProposalContract",
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Util,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "OffchainVotingHelperContract",
    name: "OffchainVotingHelperContract",
    alias: "offchainVotingHelper",
    path: "../../contracts/helpers/OffchainVotingHelperContract",
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Util,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: adaptersIdsMap.VOTING_ADAPTER,
    name: "OffchainVotingContract",
    alias: "voting",
    path: "../../contracts/adapters/voting/OffchainVotingContract",
    // Disabled because it is not deployed with all the other contracts
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.VOTING_HASH_ADAPTER,
    name: "OffchainVotingHashContract",
    alias: "offchainVotingHashAdapter",
    path: "../../contracts/adapters/voting/OffchainVotingHashContract",
    // Disabled because it is not deployed with all the other contracts
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: adaptersIdsMap.KICK_BAD_REPORTER_ADAPTER,
    name: "KickBadReporterAdapter",
    alias: "kickBadReporterAdapter",
    path: "../../contracts/adapters/voting/KickBadReporterAdapter",
    // Disabled because it is not deployed with all the other contracts
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {},
    },
  },

  // Withdraw / Kick Adapters
  {
    id: adaptersIdsMap.RAGEQUIT_ADAPTER,
    name: "RagequitContract",
    alias: "ragequit",
    path: "../../contracts/adapters/RagequitContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.GUILDKICK_ADAPTER,
    name: "GuildKickContract",
    alias: "guildkick",
    path: "../../contracts/adapters/GuildKickContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
        ],
      },
    },
  },

  // Funding/Onboarding Adapters
  {
    id: adaptersIdsMap.FINANCING_ADAPTER,
    name: "FinancingContract",
    alias: "financing",
    path: "../../contracts/adapters/FinancingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
      },
    },
  },
  {
    id: adaptersIdsMap.REIMBURSEMENT_ADAPTER,
    name: "ReimbursementContract",
    alias: "reimbursement",
    path: "../../contracts/companion/ReimbursementContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    deploymentArgs: ["gelato"],
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.WITHDRAW,
        ],
      },
    },
    daoConfigs: [
      //config to mint UNITS
      ["daoAddress", "gasPriceLimit", "spendLimitPeriod", "spendLimitEth"],
    ],
  },
  {
    id: adaptersIdsMap.ONBOARDING_ADAPTER,
    name: "OnboardingContract",
    alias: "onboarding",
    path: "../../contracts/adapters/OnboardingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [
        daoAccessFlagsMap.SUBMIT_PROPOSAL,
        daoAccessFlagsMap.UPDATE_DELEGATE_KEY,
        daoAccessFlagsMap.NEW_MEMBER,
      ],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
      },
    },
    daoConfigs: [
      //config to mint UNITS
      [
        "daoAddress",
        "unitTokenToMint",
        "unitPrice",
        "nbUnits",
        "maxChunks",
        "tokenAddr",
      ],
      //config to mint LOOT
      [
        "daoAddress",
        "lootTokenToMint",
        "unitPrice",
        "nbUnits",
        "maxChunks",
        "tokenAddr",
      ],
    ],
  },
  {
    id: adaptersIdsMap.COUPON_ONBOARDING_ADAPTER,
    name: "CouponOnboardingContract",
    alias: "couponOnboarding",
    path: "../../contracts/adapters/CouponOnboardingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
      },
    },
    daoConfigs: [
      //config to mint coupons
      [
        "daoAddress",
        "couponCreatorAddress",
        extensionsIdsMap.ERC20_EXT, //loads the address from the ext
        "unitTokenToMint",
        "maxAmount",
      ],
    ],
  },
  {
    id: adaptersIdsMap.KYC_ONBOARDING_ADAPTER,
    name: "KycOnboardingContract",
    alias: "kycOnboarding",
    path: "../../contracts/adapters/KycOnboardingContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    deploymentArgs: ["weth"],
    acls: {
      dao: [daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
      },
    },
    daoConfigs: [
      [
        "daoAddress",
        "kycSignerAddress",
        "unitPrice",
        "nbUnits",
        "maxChunks",
        "maxUnits",
        "kycMaxMembers",
        "kycFundTargetAddress",
        "tokenAddr",
        "unitTokenToMint",
      ],
    ],
  },
  {
    id: adaptersIdsMap.TRIBUTE_ADAPTER,
    name: "TributeContract",
    alias: "tribute",
    path: "../../contracts/adapters/TributeContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
          bankExtensionAclFlagsMap.REGISTER_NEW_TOKEN,
        ],
      },
    },
    daoConfigs: [
      //config to mint UNITS
      ["daoAddress", "unitTokenToMint"],
      //config to mint LOOT
      ["daoAddress", "lootTokenToMint"],
    ],
  },
  {
    id: adaptersIdsMap.TRIBUTE_NFT_ADAPTER,
    name: "TributeNFTContract",
    alias: "tributeNFT",
    path: "../../contracts/adapters/TributeNFTContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [bankExtensionAclFlagsMap.ADD_TO_BALANCE],
        [extensionsIdsMap.ERC721_EXT]: [erc721ExtensionAclFlagsMap.COLLECT_NFT],
      },
    },
    daoConfigs: [
      //config to mint UNITS
      ["daoAddress", "unitTokenToMint"],
    ],
  },
  {
    id: adaptersIdsMap.LEND_NFT_ADAPTER,
    name: "LendNFTContract",
    alias: "lendNFT",
    path: "../../contracts/adapters/LendNFTContract",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [daoAccessFlagsMap.SUBMIT_PROPOSAL, daoAccessFlagsMap.NEW_MEMBER],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.SUB_FROM_BALANCE,
          bankExtensionAclFlagsMap.ADD_TO_BALANCE,
        ],
        [extensionsIdsMap.ERC721_EXT]: [
          erc721ExtensionAclFlagsMap.COLLECT_NFT,
          erc721ExtensionAclFlagsMap.WITHDRAW_NFT,
        ],
        [extensionsIdsMap.ERC1155_EXT]: [
          erc1155ExtensionAclFlagsMap.COLLECT_NFT,
          erc1155ExtensionAclFlagsMap.WITHDRAW_NFT,
        ],
        [extensionsIdsMap.VESTING_EXT]: [
          vestingExtensionAclFlagsMap.NEW_VESTING,
          vestingExtensionAclFlagsMap.REMOVE_VESTING,
        ],
      },
    },
    daoConfigs: [
      //config to mint UNITS
      ["daoAddress", "unitTokenToMint"],
    ],
  },
  {
    id: adaptersIdsMap.ERC20_TRANSFER_STRATEGY_ADAPTER,
    name: "ERC20TransferStrategy",
    alias: "erc20TransferStrategy",
    path: "../../contracts/extensions/token/erc20/ERC20TransferStrategy",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Adapter,
    acls: {
      dao: [],
      extensions: {
        [extensionsIdsMap.BANK_EXT]: [
          bankExtensionAclFlagsMap.INTERNAL_TRANSFER,
        ],
      },
    },
  },

  /**
   * Utils
   */
  {
    id: "dao-artifacts",
    name: "DaoArtifacts",
    path: "../../contracts/utils/DaoArtifacts",
    enabled: false,
    skipAutoDeploy: true,
    version: "1.0.0",
    type: ContractType.Util,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: "multicall",
    name: "Multicall",
    path: "../../contracts/utils/Multicall",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Util,
    acls: {
      dao: [],
      extensions: {},
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_VESTING_ERC721_HELPER_ADAPTER,
    name: "VintageVestingERC721Helper",
    alias: "vintageVestingERC721Helper",
    path: "../../contracts/adapters/VintageVestingERC721Helper",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Util,
    deploymentArgs: ["vintageVestingNFTName",
      "vintageVestingNFTSymbol",
      "vintageVestingContractAddr",
      "vintageVestingERC721HelperAddr"
    ],
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.VINTAGE_VESTING_ERC721_ADAPTER,
    name: "VintageVestingERC721",
    alias: "vintageVestingERC721",
    path: "../../contracts/adapters/VintageVestingERC721",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Util,
    deploymentArgs: ["vintageVestingNFTName", "vintageVestingNFTSymbol", "vintageVestingContractAddr"],
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_VESTING_ERC721_HELPER_ADAPTER,
    name: "FlexVestingERC721Helper",
    alias: "flexVestingERC721Helper",
    path: "../../contracts/adapters/FlexVestingERC721Helper",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Util,
    deploymentArgs: [],
    acls: {
      dao: [],
      extensions: {
      },
    },
  },
  {
    id: adaptersIdsMap.FLEX_VESTING_ERC721_ADAPTER,
    name: "FlexVestingERC721",
    alias: "flexVestingERC721",
    path: "../../contracts/adapters/FlexVestingERC721",
    enabled: false,
    version: "1.0.0",
    type: ContractType.Util,
    deploymentArgs: ["flexVestingNFTName", "flexVestingNFTSymbol", "flexVestingContractAddr", "flexVestingERC721HelperAddr"],
    acls: {
      dao: [],
      extensions: {
      },
    },
  },

  /**
   * Library
   */

  {
    id: "vintagefundinglibrary",
    name: "InvestmentLibrary",
    path: "../../contracts/vintage/libraries/InvestmentLibrary",
    enabled: true,
    version: "1.0.0",
    type: ContractType.Library,
    acls: {
      dao: [],
      extensions: {},
    },
  }
];

// export const getConfig = (name: string) => {
//   return contracts.find((c: any) => c.name === name);
// };

// export const isDeployable = (name: string) => {
//   const c = getConfig(name);
//   return c && c.enabled;
// };
