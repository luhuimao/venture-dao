/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IManaging,
  IManagingInterface,
} from "../../../../contracts/adapters/interfaces/IManaging";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "dao",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "processProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "dao",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "adapterOrExtensionId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "adapterOrExtensionAddr",
            type: "address",
          },
          {
            internalType: "enum IManaging.UpdateType",
            name: "updateType",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "flags",
            type: "uint128",
          },
          {
            internalType: "bytes32[]",
            name: "keys",
            type: "bytes32[]",
          },
          {
            internalType: "uint256[]",
            name: "values",
            type: "uint256[]",
          },
          {
            internalType: "address[]",
            name: "extensionAddresses",
            type: "address[]",
          },
          {
            internalType: "uint128[]",
            name: "extensionAclFlags",
            type: "uint128[]",
          },
        ],
        internalType: "struct IManaging.ProposalDetails",
        name: "proposal",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "numericValue",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "addressValue",
            type: "address",
          },
          {
            internalType: "enum IManaging.ConfigType",
            name: "configType",
            type: "uint8",
          },
        ],
        internalType: "struct IManaging.Configuration[]",
        name: "configs",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "submitProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IManaging__factory {
  static readonly abi = _abi;
  static createInterface(): IManagingInterface {
    return new utils.Interface(_abi) as IManagingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IManaging {
    return new Contract(address, _abi, signerOrProvider) as IManaging;
  }
}
