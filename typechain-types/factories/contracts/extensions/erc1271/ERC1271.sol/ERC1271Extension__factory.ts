/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC1271Extension,
  ERC1271ExtensionInterface,
} from "../../../../../contracts/extensions/erc1271/ERC1271.sol/ERC1271Extension";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "contract DaoRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "_dao",
        type: "address",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "permissionHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "permissionHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "signatureHash",
        type: "bytes32",
      },
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    name: "sign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "signatures",
    outputs: [
      {
        internalType: "bytes32",
        name: "signatureHash",
        type: "bytes32",
      },
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916905534801561001a57600080fd5b50610acd8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634162169f116100505780634162169f1461013d578063485cc9551461016d578063b461382d1461018257600080fd5b8063158ef93e146100775780631626ba7e146100995780632422224e146100dd575b600080fd5b6000546100849060ff1681565b60405190151581526020015b60405180910390f35b6100ac6100a73660046108ed565b610195565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610090565b6101076100eb366004610879565b6001602081905260009182526040909120805491015460e01b82565b604080519283527fffffffff00000000000000000000000000000000000000000000000000000000909116602083015201610090565b6000546101559061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610090565b61018061017b3660046109c1565b6102b6565b005b610180610190366004610891565b61042a565b60008281526001602081815260408084208151808301909252805482529092015460e01b7fffffffff00000000000000000000000000000000000000000000000000000000169082018190526102325760405162461bcd60e51b815260206004820152601a60248201527f657263313237313a3a696e76616c6964207369676e617475726500000000000060448201526064015b60405180910390fd5b826040516020016102439190610a30565b604051602081830303815290604052805190602001208160000151146102ab5760405162461bcd60e51b815260206004820152601f60248201527f657263313237313a3a696e76616c6964207369676e61747572652068617368006044820152606401610229565b602001519392505050565b60005460ff16156103095760405162461bcd60e51b815260206004820152601c60248201527f657263313237313a3a616c726561647920696e697469616c697a6564000000006044820152606401610229565b6040517fa230c5240000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015283169063a230c5249060240160206040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190610852565b6103e75760405162461bcd60e51b815260206004820152601360248201527f657263313237313a3a6e6f74206d656d626572000000000000000000000000006044820152606401610229565b50600080546001600160a01b03909216610100027fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b600030331480610449575060005461010090046001600160a01b031633145b8061046957506000546104699061010090046001600160a01b0316610613565b80610544575060005461010090046001600160a01b0316636cfdc32e33308480156104a457634e487b7160e01b600052602160045260246000fd5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260ff16604482015260640160206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190610852565b6105905760405162461bcd60e51b815260206004820152601560248201527f657263313237313a3a61636365737344656e69656400000000000000000000006044820152606401610229565b506040805180820182529283527fffffffff00000000000000000000000000000000000000000000000000000000919091166020808401918252600094855260019081905291909320915182559151910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c919091179055565b600080826001600160a01b031663c19d93fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064f57600080fd5b505afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068791906109f9565b60018111156106a657634e487b7160e01b600052602160045260246000fd5b14801561084c5750816001600160a01b031663c67143666040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190610a18565b15806107b657506040517fa230c5240000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0383169063a230c5249060240160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190610852565b8061084c57506040517f68c18beb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038316906368c18beb9060240160206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610852565b92915050565b600060208284031215610863578081fd5b81518015158114610872578182fd5b9392505050565b60006020828403121561088a578081fd5b5035919050565b6000806000606084860312156108a5578182fd5b833592506020840135915060408401357fffffffff00000000000000000000000000000000000000000000000000000000811681146108e2578182fd5b809150509250925092565b600080604083850312156108ff578182fd5b82359150602083013567ffffffffffffffff8082111561091d578283fd5b818501915085601f830112610930578283fd5b81358181111561094257610942610a69565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561098857610988610a69565b816040528281528860208487010111156109a0578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600080604083850312156109d3578182fd5b82356109de81610a7f565b915060208301356109ee81610a7f565b809150509250929050565b600060208284031215610a0a578081fd5b815160028110610872578182fd5b600060208284031215610a29578081fd5b5051919050565b60008251815b81811015610a505760208186018101518583015201610a36565b81811115610a5e5782828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a9457600080fd5b5056fea26469706673582212206d395309b32e93cf9a9b671207bc8b2192b2c3893cff1e8ff7c0daba556378fa64736f6c63430008040033";

type ERC1271ExtensionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1271ExtensionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1271Extension__factory extends ContractFactory {
  constructor(...args: ERC1271ExtensionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC1271Extension> {
    return super.deploy(overrides || {}) as Promise<ERC1271Extension>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC1271Extension {
    return super.attach(address) as ERC1271Extension;
  }
  override connect(signer: Signer): ERC1271Extension__factory {
    return super.connect(signer) as ERC1271Extension__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1271ExtensionInterface {
    return new utils.Interface(_abi) as ERC1271ExtensionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1271Extension {
    return new Contract(address, _abi, signerOrProvider) as ERC1271Extension;
  }
}
