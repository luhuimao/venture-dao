/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../contracts/utils/Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100f357806386d516e8146100f9578063a8b0574e146100ff578063ee82ac5e1461010d57600080fd5b80630f28c97d1461008d578063252dba42146100a257806327e86d6e146100c35780634d2301cc146100cb575b600080fd5b425b6040519081526020015b60405180910390f35b6100b56100b0366004610319565b61011f565b6040516100999291906103b1565b61008f6102cb565b61008f6100d93660046102de565b73ffffffffffffffffffffffffffffffffffffffff163190565b4461008f565b4561008f565b604051418152602001610099565b61008f61011b366004610389565b4090565b4360608267ffffffffffffffff81111561014957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017c57816020015b60608152602001906001900390816101675790505b50905060005b838110156102c3576000808686848181106101ad57634e487b7160e01b600052603260045260246000fd5b90506020028101906101bf91906104f7565b6101cd9060208101906102de565b73ffffffffffffffffffffffffffffffffffffffff1687878581811061020357634e487b7160e01b600052603260045260246000fd5b905060200281019061021591906104f7565b61022390602081019061048d565b6040516102319291906103a1565b6000604051808303816000865af19150503d806000811461026e576040519150601f19603f3d011682016040523d82523d6000602084013e610273565b606091505b50915091508161028257600080fd5b808484815181106102a357634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806102bb9061054b565b915050610182565b509250929050565b60006102d8600143610534565b40905090565b6000602082840312156102ef578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610312578182fd5b9392505050565b6000806020838503121561032b578081fd5b823567ffffffffffffffff80821115610342578283fd5b818501915085601f830112610355578283fd5b813581811115610363578384fd5b8660208260051b8501011115610377578384fd5b60209290920196919550909350505050565b60006020828403121561039a578081fd5b5035919050565b8183823760009101908152919050565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b8281101561047f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088870301845281518051808852885b81811015610431578281018801518982018901528701610416565b81811115610441578988838b0101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016969096018501955092840192908401906001016103de565b509398975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126104c1578283fd5b83018035915067ffffffffffffffff8211156104db578283fd5b6020019150368190038213156104f057600080fd5b9250929050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261052a578182fd5b9190910192915050565b60008282101561054657610546610584565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561057d5761057d610584565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220eda8a759c3b5047c360924955e03769f02903eb7686c50084ac769e1a3d7f57a64736f6c63430008040033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
