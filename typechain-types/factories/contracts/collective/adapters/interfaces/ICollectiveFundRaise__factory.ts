/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICollectiveFundRaise,
  ICollectiveFundRaiseInterface,
} from "../../../../../contracts/collective/adapters/interfaces/ICollectiveFundRaise";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [],
    name: "LAST_NEW_FUND_PROPOSAL_NOT_FINISH",
    type: "error",
  },
  {
    inputs: [],
    name: "UNEXECUTE",
    type: "error",
  },
  {
    inputs: [],
    name: "VOTING_NOT_FINISH",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "enum ICollectiveFundRaise.ProposalState",
        name: "state",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allVotingWeight",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nbYes",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nbNo",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "voteResult",
        type: "uint256",
      },
    ],
    name: "proposalExecuted",
    type: "event",
  },
] as const;

export class ICollectiveFundRaise__factory {
  static readonly abi = _abi;
  static createInterface(): ICollectiveFundRaiseInterface {
    return new utils.Interface(_abi) as ICollectiveFundRaiseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICollectiveFundRaise {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ICollectiveFundRaise;
  }
}
