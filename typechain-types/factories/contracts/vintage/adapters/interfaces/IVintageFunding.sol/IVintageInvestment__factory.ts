/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVintageInvestment,
  IVintageInvestmentInterface,
} from "../../../../../../contracts/vintage/adapters/interfaces/IVintageFunding.sol/IVintageInvestment";

const _abi = [
  {
    inputs: [],
    name: "INVESTMENT_PROPOSAL_NOT_FINALIZED",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalID",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "allVotingWeight",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nbYes",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nbNo",
        type: "uint128",
      },
    ],
    name: "ProposalExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalID",
        type: "bytes32",
      },
    ],
    name: "StartVote",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "dao",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "processProposal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "dao",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "investmentAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "investmentToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "receiver",
                type: "address",
              },
            ],
            internalType: "struct IVintageInvestment.InvestmentInfo",
            name: "investmentInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "escrow",
                type: "bool",
              },
              {
                internalType: "address",
                name: "paybackToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "paybackTokenAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "approver",
                type: "address",
              },
              {
                internalType: "bool",
                name: "nftEnable",
                type: "bool",
              },
              {
                internalType: "address",
                name: "vestingNft",
                type: "address",
              },
            ],
            internalType: "struct IVintageInvestment.PaybackTokenInfo",
            name: "paybackTokenInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "description",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "vestingStartTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vetingEndTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vestingCliffEndTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vestingCliffLockAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vestingInterval",
                type: "uint256",
              },
            ],
            internalType: "struct IVintageInvestment.VestInfo",
            name: "vestInfo",
            type: "tuple",
          },
        ],
        internalType: "struct IVintageInvestment.InvestmentProposalParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "submitProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVintageInvestment__factory {
  static readonly abi = _abi;
  static createInterface(): IVintageInvestmentInterface {
    return new utils.Interface(_abi) as IVintageInvestmentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVintageInvestment {
    return new Contract(address, _abi, signerOrProvider) as IVintageInvestment;
  }
}
