/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVintageFundRaise,
  IVintageFundRaiseInterface,
} from "../../../../../contracts/vintage/adapters/interfaces/IVintageFundRaise";

const _abi = [
  {
    inputs: [],
    name: "INVALID_PARAM",
    type: "error",
  },
  {
    inputs: [],
    name: "LAST_NEW_FUND_PROPOSAL_NOT_FINISH",
    type: "error",
  },
  {
    inputs: [],
    name: "VOTING_NOT_FINISH",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "daoAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "enum IVintageFundRaise.ProposalState",
        name: "state",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "allVotingWeight",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nbYes",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "nbNo",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "voteResult",
        type: "uint256",
      },
    ],
    name: "proposalExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract DaoRegistry",
        name: "dao",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "processProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract DaoRegistry",
            name: "dao",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fundRaiseMinTarget",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundRaiseMaxCap",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lpMinDepositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lpMaxDepositAmount",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "fundRaiseType",
                type: "uint8",
              },
            ],
            internalType: "struct IVintageFundRaise.ProposalFundRaiseInfo",
            name: "proposalFundRaiseInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "startTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundTerm",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "redemptPeriod",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "redemptInterval",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "refundPeriod",
                type: "uint256",
              },
            ],
            internalType: "struct IVintageFundRaise.ProposalTimeInfo",
            name: "proposalTimeInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "managementFeeRatio",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "paybackTokenManagementFeeRatio",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "redepmtFeeRatio",
                type: "uint256",
              },
            ],
            internalType: "struct IVintageFundRaise.ProposalFeeInfo",
            name: "proposalFeeInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "managementFeeAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "fundRaiseTokenAddress",
                type: "address",
              },
            ],
            internalType: "struct IVintageFundRaise.ProposalAddressInfo",
            name: "proposalAddressInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fundFromInverstor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "projectTokenFromInvestor",
                type: "uint256",
              },
            ],
            internalType: "struct IVintageFundRaise.ProoserReward",
            name: "proposerReward",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "enable",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "vtype",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "whitelist",
                type: "address[]",
              },
            ],
            internalType:
              "struct IVintageFundRaise.ProposalPriorityDepositInfo",
            name: "priorityDeposite",
            type: "tuple",
          },
        ],
        internalType: "struct IVintageFundRaise.ProposalParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "submitProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVintageFundRaise__factory {
  static readonly abi = _abi;
  static createInterface(): IVintageFundRaiseInterface {
    return new utils.Interface(_abi) as IVintageFundRaiseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVintageFundRaise {
    return new Contract(address, _abi, signerOrProvider) as IVintageFundRaise;
  }
}
