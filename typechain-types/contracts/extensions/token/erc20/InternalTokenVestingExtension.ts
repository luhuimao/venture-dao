/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface InternalTokenVestingExtensionInterface
  extends utils.Interface {
  functions: {
    "createNewVesting(address,address,uint88,uint64)": FunctionFragment;
    "getMinimumBalance(address,address)": FunctionFragment;
    "getMinimumBalanceInternal(uint64,uint64,uint88)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "removeVesting(address,address,uint88)": FunctionFragment;
    "vesting(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createNewVesting"
      | "getMinimumBalance"
      | "getMinimumBalanceInternal"
      | "initialize"
      | "removeVesting"
      | "vesting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNewVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumBalanceInternal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vesting",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumBalanceInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;

  events: {};
}

export interface InternalTokenVestingExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InternalTokenVestingExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNewVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMinimumBalance(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumBalanceInternal(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      dao: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vesting(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDate: BigNumber;
        endDate: BigNumber;
        blockedAmount: BigNumber;
      }
    >;
  };

  createNewVesting(
    member: PromiseOrValue<string>,
    internalToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMinimumBalance(
    member: PromiseOrValue<string>,
    internalToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumBalanceInternal(
    startDate: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    dao: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVesting(
    member: PromiseOrValue<string>,
    internalToken: PromiseOrValue<string>,
    amountToRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vesting(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDate: BigNumber;
      endDate: BigNumber;
      blockedAmount: BigNumber;
    }
  >;

  callStatic: {
    createNewVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinimumBalance(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumBalanceInternal(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      dao: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vesting(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDate: BigNumber;
        endDate: BigNumber;
        blockedAmount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    createNewVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMinimumBalance(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumBalanceInternal(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      dao: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vesting(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMinimumBalance(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumBalanceInternal(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      dao: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVesting(
      member: PromiseOrValue<string>,
      internalToken: PromiseOrValue<string>,
      amountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vesting(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
