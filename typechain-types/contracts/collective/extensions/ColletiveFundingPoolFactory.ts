/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ColletiveFundingPoolFactoryInterface extends utils.Interface {
  functions: {
    "create(address)": FunctionFragment;
    "getExtensionAddress(address)": FunctionFragment;
    "identityAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "create" | "getExtensionAddress" | "identityAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtensionAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "identityAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExtensionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityAddress",
    data: BytesLike
  ): Result;

  events: {
    "ColletiveFundingPoolCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ColletiveFundingPoolCreated"
  ): EventFragment;
}

export interface ColletiveFundingPoolCreatedEventObject {
  daoAddress: string;
  extensionAddress: string;
}
export type ColletiveFundingPoolCreatedEvent = TypedEvent<
  [string, string],
  ColletiveFundingPoolCreatedEventObject
>;

export type ColletiveFundingPoolCreatedEventFilter =
  TypedEventFilter<ColletiveFundingPoolCreatedEvent>;

export interface ColletiveFundingPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ColletiveFundingPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExtensionAddress(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    identityAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  create(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExtensionAddress(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  identityAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    create(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExtensionAddress(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    identityAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ColletiveFundingPoolCreated(address,address)"(
      daoAddress?: null,
      extensionAddress?: null
    ): ColletiveFundingPoolCreatedEventFilter;
    ColletiveFundingPoolCreated(
      daoAddress?: null,
      extensionAddress?: null
    ): ColletiveFundingPoolCreatedEventFilter;
  };

  estimateGas: {
    create(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExtensionAddress(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExtensionAddress(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
