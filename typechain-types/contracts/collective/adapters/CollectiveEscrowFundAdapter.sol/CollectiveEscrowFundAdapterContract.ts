/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface CollectiveEscrowFundAdapterContractInterface
  extends utils.Interface {
  functions: {
    "escrowFundFromFailedFundRaising(address,address,address,uint256,uint256)": FunctionFragment;
    "escrowFundFromLiquidation(address,address,address,uint256,uint256)": FunctionFragment;
    "escrowFundFromOverRaised(address,address,address,uint256,uint256)": FunctionFragment;
    "escrowFunds(address,address,address)": FunctionFragment;
    "escrowFundsFromFailedFundRaise(address,address,address,uint256)": FunctionFragment;
    "escrowFundsFromLiquidation(address,address,address,uint256)": FunctionFragment;
    "escrowFundsFromOverRaised(address,address,address,uint256)": FunctionFragment;
    "withdrawFromFailedFundRaising(address,address,uint256)": FunctionFragment;
    "withdrawFromLiquidation(address,address,uint256)": FunctionFragment;
    "withdrawFromOverRaised(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "escrowFundFromFailedFundRaising"
      | "escrowFundFromLiquidation"
      | "escrowFundFromOverRaised"
      | "escrowFunds"
      | "escrowFundsFromFailedFundRaise"
      | "escrowFundsFromLiquidation"
      | "escrowFundsFromOverRaised"
      | "withdrawFromFailedFundRaising"
      | "withdrawFromLiquidation"
      | "withdrawFromOverRaised"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "escrowFundFromFailedFundRaising",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFundFromLiquidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFundFromOverRaised",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFundsFromFailedFundRaise",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFundsFromLiquidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFundsFromOverRaised",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromFailedFundRaising",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromLiquidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromOverRaised",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "escrowFundFromFailedFundRaising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFundFromLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFundFromOverRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFundsFromFailedFundRaise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFundsFromLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFundsFromOverRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromFailedFundRaising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromOverRaised",
    data: BytesLike
  ): Result;

  events: {
    "EscrowFund(address,address,address,uint256)": EventFragment;
    "EscrowFundFromFailedFundRaising(address,address,address,uint256,uint256)": EventFragment;
    "EscrowFundFromLiquidation(address,address,address,uint256,uint256)": EventFragment;
    "EscrowFundFromOverRaised(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawFromFailedFundRaising(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawFromLiquidation(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawFromOverRaised(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowFund"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EscrowFundFromFailedFundRaising"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowFundFromLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowFundFromOverRaised"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawFromFailedFundRaising"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromOverRaised"): EventFragment;
}

export interface EscrowFundEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
}
export type EscrowFundEvent = TypedEvent<
  [string, string, string, BigNumber],
  EscrowFundEventObject
>;

export type EscrowFundEventFilter = TypedEventFilter<EscrowFundEvent>;

export interface EscrowFundFromFailedFundRaisingEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  fundRaisingId: BigNumber;
}
export type EscrowFundFromFailedFundRaisingEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  EscrowFundFromFailedFundRaisingEventObject
>;

export type EscrowFundFromFailedFundRaisingEventFilter =
  TypedEventFilter<EscrowFundFromFailedFundRaisingEvent>;

export interface EscrowFundFromLiquidationEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  liquidationId: BigNumber;
}
export type EscrowFundFromLiquidationEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  EscrowFundFromLiquidationEventObject
>;

export type EscrowFundFromLiquidationEventFilter =
  TypedEventFilter<EscrowFundFromLiquidationEvent>;

export interface EscrowFundFromOverRaisedEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  fundRaisingId: BigNumber;
}
export type EscrowFundFromOverRaisedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  EscrowFundFromOverRaisedEventObject
>;

export type EscrowFundFromOverRaisedEventFilter =
  TypedEventFilter<EscrowFundFromOverRaisedEvent>;

export interface WithdrawFromFailedFundRaisingEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  fundRaisingId: BigNumber;
}
export type WithdrawFromFailedFundRaisingEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawFromFailedFundRaisingEventObject
>;

export type WithdrawFromFailedFundRaisingEventFilter =
  TypedEventFilter<WithdrawFromFailedFundRaisingEvent>;

export interface WithdrawFromLiquidationEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  liquidationId: BigNumber;
}
export type WithdrawFromLiquidationEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawFromLiquidationEventObject
>;

export type WithdrawFromLiquidationEventFilter =
  TypedEventFilter<WithdrawFromLiquidationEvent>;

export interface WithdrawFromOverRaisedEventObject {
  dao: string;
  token: string;
  account: string;
  amount: BigNumber;
  fundRaisingId: BigNumber;
}
export type WithdrawFromOverRaisedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawFromOverRaisedEventObject
>;

export type WithdrawFromOverRaisedEventFilter =
  TypedEventFilter<WithdrawFromOverRaisedEvent>;

export interface CollectiveEscrowFundAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectiveEscrowFundAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    escrowFundFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFundFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFundFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escrowFundsFromFailedFundRaise(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escrowFundsFromLiquidation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escrowFundsFromOverRaised(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  escrowFundFromFailedFundRaising(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fundRaisingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFundFromLiquidation(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    liquidationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFundFromOverRaised(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fundRaisingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFunds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrowFundsFromFailedFundRaise(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrowFundsFromLiquidation(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrowFundsFromOverRaised(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFromFailedFundRaising(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    fundRaisingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromLiquidation(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    liquidationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromOverRaised(
    dao: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    fundRaisingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    escrowFundFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFundFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFundFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromFailedFundRaise(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromLiquidation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromOverRaised(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EscrowFund(address,address,address,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null
    ): EscrowFundEventFilter;
    EscrowFund(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null
    ): EscrowFundEventFilter;

    "EscrowFundFromFailedFundRaising(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): EscrowFundFromFailedFundRaisingEventFilter;
    EscrowFundFromFailedFundRaising(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): EscrowFundFromFailedFundRaisingEventFilter;

    "EscrowFundFromLiquidation(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      liquidationId?: null
    ): EscrowFundFromLiquidationEventFilter;
    EscrowFundFromLiquidation(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      liquidationId?: null
    ): EscrowFundFromLiquidationEventFilter;

    "EscrowFundFromOverRaised(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): EscrowFundFromOverRaisedEventFilter;
    EscrowFundFromOverRaised(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): EscrowFundFromOverRaisedEventFilter;

    "WithdrawFromFailedFundRaising(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): WithdrawFromFailedFundRaisingEventFilter;
    WithdrawFromFailedFundRaising(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): WithdrawFromFailedFundRaisingEventFilter;

    "WithdrawFromLiquidation(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      liquidationId?: null
    ): WithdrawFromLiquidationEventFilter;
    WithdrawFromLiquidation(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      liquidationId?: null
    ): WithdrawFromLiquidationEventFilter;

    "WithdrawFromOverRaised(address,address,address,uint256,uint256)"(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): WithdrawFromOverRaisedEventFilter;
    WithdrawFromOverRaised(
      dao?: null,
      token?: null,
      account?: null,
      amount?: null,
      fundRaisingId?: null
    ): WithdrawFromOverRaisedEventFilter;
  };

  estimateGas: {
    escrowFundFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFundFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFundFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromFailedFundRaise(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromLiquidation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowFundsFromOverRaised(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    escrowFundFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFundFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFundFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowFundsFromFailedFundRaise(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowFundsFromLiquidation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowFundsFromOverRaised(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromFailedFundRaising(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromLiquidation(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromOverRaised(
      dao: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      fundRaisingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
