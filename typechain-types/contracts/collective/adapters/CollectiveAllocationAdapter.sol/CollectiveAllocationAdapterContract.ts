/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface CollectiveAllocationAdapterContractInterface
  extends utils.Interface {
  functions: {
    "PERCENTAGE_PRECISION()": FunctionFragment;
    "allocateProjectToken(address,address,address,bytes32,uint256[6])": FunctionFragment;
    "getInvestmentRewards(address,address,bytes32)": FunctionFragment;
    "getProposerBonus(address,address,uint256)": FunctionFragment;
    "ifEligible(address,address,bytes32)": FunctionFragment;
    "isVestCreated(address,bytes32,address)": FunctionFragment;
    "vestCreated(address,bytes32,address)": FunctionFragment;
    "vestingInfos(address,bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERCENTAGE_PRECISION"
      | "allocateProjectToken"
      | "getInvestmentRewards"
      | "getProposerBonus"
      | "ifEligible"
      | "isVestCreated"
      | "vestCreated"
      | "vestingInfos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateProjectToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestmentRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerBonus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ifEligible",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isVestCreated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vestCreated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingInfos",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateProjectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestmentRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ifEligible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVestCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfos",
    data: BytesLike
  ): Result;

  events: {
    "AllocateToken(address,bytes32,address,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocateToken"): EventFragment;
}

export interface AllocateTokenEventObject {
  daoAddr: string;
  proposalId: string;
  proposer: string;
  lps: string[];
}
export type AllocateTokenEvent = TypedEvent<
  [string, string, string, string[]],
  AllocateTokenEventObject
>;

export type AllocateTokenEventFilter = TypedEventFilter<AllocateTokenEvent>;

export interface CollectiveAllocationAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectiveAllocationAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocateProjectToken(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInvestmentRewards(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposerBonus(
      dao: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ifEligible(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { tokenAmount: BigNumber; created: boolean }
    >;
  };

  PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  allocateProjectToken(
    dao: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    proposerAddr: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    uint256Args: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInvestmentRewards(
    dao: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposerBonus(
    dao: PromiseOrValue<string>,
    proposerAddr: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ifEligible(
    dao: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVestCreated(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    recepient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vestCreated(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingInfos(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { tokenAmount: BigNumber; created: boolean }
  >;

  callStatic: {
    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allocateProjectToken(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getInvestmentRewards(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposerBonus(
      dao: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifEligible(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vestingInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { tokenAmount: BigNumber; created: boolean }
    >;
  };

  filters: {
    "AllocateToken(address,bytes32,address,address[])"(
      daoAddr?: null,
      proposalId?: null,
      proposer?: null,
      lps?: null
    ): AllocateTokenEventFilter;
    AllocateToken(
      daoAddr?: null,
      proposalId?: null,
      proposer?: null,
      lps?: null
    ): AllocateTokenEventFilter;
  };

  estimateGas: {
    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allocateProjectToken(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInvestmentRewards(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposerBonus(
      dao: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifEligible(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTAGE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocateProjectToken(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInvestmentRewards(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposerBonus(
      dao: PromiseOrValue<string>,
      proposerAddr: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ifEligible(
      dao: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestCreated(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
