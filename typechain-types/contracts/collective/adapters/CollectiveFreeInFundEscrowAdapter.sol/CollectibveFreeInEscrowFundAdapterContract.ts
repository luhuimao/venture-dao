/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface CollectibveFreeInEscrowFundAdapterContractInterface
  extends utils.Interface {
  functions: {
    "escrowFundFromFundingPool(address,bytes32,address,address,uint256)": FunctionFragment;
    "escrowFunds(address,bytes32,address)": FunctionFragment;
    "getEscrowAmount(address,bytes32,address)": FunctionFragment;
    "withdraw(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "escrowFundFromFundingPool"
      | "escrowFunds"
      | "getEscrowAmount"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "escrowFundFromFundingPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "escrowFundFromFundingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EscrowFund(address,bytes32,address,address,uint256)": EventFragment;
    "WithDraw(address,bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDraw"): EventFragment;
}

export interface EscrowFundEventObject {
  dao: string;
  fundRaiseProposalId: string;
  token: string;
  account: string;
  amount: BigNumber;
}
export type EscrowFundEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  EscrowFundEventObject
>;

export type EscrowFundEventFilter = TypedEventFilter<EscrowFundEvent>;

export interface WithDrawEventObject {
  dao: string;
  fundRaiseProposalId: string;
  token: string;
  account: string;
  amount: BigNumber;
}
export type WithDrawEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  WithDrawEventObject
>;

export type WithDrawEventFilter = TypedEventFilter<WithDrawEvent>;

export interface CollectibveFreeInEscrowFundAdapterContract
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectibveFreeInEscrowFundAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    escrowFundFromFundingPool(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    getEscrowAmount(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    withdraw(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  escrowFundFromFundingPool(
    dao: PromiseOrValue<string>,
    fundRaiseProposalId: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFunds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

  getEscrowAmount(
    dao: PromiseOrValue<string>,
    fundRaiseProposalId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  withdraw(
    dao: PromiseOrValue<string>,
    fundRaiseProposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    escrowFundFromFundingPool(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    getEscrowAmount(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    withdraw(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EscrowFund(address,bytes32,address,address,uint256)"(
      dao?: null,
      fundRaiseProposalId?: null,
      token?: null,
      account?: null,
      amount?: null
    ): EscrowFundEventFilter;
    EscrowFund(
      dao?: null,
      fundRaiseProposalId?: null,
      token?: null,
      account?: null,
      amount?: null
    ): EscrowFundEventFilter;

    "WithDraw(address,bytes32,address,address,uint256)"(
      dao?: null,
      fundRaiseProposalId?: null,
      token?: null,
      account?: null,
      amount?: null
    ): WithDrawEventFilter;
    WithDraw(
      dao?: null,
      fundRaiseProposalId?: null,
      token?: null,
      account?: null,
      amount?: null
    ): WithDrawEventFilter;
  };

  estimateGas: {
    escrowFundFromFundingPool(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowAmount(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    escrowFundFromFundingPool(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFunds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrowAmount(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      dao: PromiseOrValue<string>,
      fundRaiseProposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
