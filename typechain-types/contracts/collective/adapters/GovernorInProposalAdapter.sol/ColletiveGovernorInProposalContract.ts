/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ColletiveGovernorInProposalContractInterface
  extends utils.Interface {
  functions: {
    "allDone(address)": FunctionFragment;
    "clearGovernorWhitelist(address)": FunctionFragment;
    "getAllGovernor(address)": FunctionFragment;
    "getGovernorAmount(address)": FunctionFragment;
    "getGovernorWhitelist(address)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isGovernorWhiteList(address,address)": FunctionFragment;
    "processProposal(address,bytes32)": FunctionFragment;
    "proposals(address,bytes32)": FunctionFragment;
    "quit(address)": FunctionFragment;
    "registerGovernorWhiteList(address,address)": FunctionFragment;
    "submitGovernorInProposal(address,address,uint256)": FunctionFragment;
    "submitGovernorOutProposal(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allDone"
      | "clearGovernorWhitelist"
      | "getAllGovernor"
      | "getGovernorAmount"
      | "getGovernorWhitelist"
      | "isActiveMember"
      | "isGovernorWhiteList"
      | "processProposal"
      | "proposals"
      | "quit"
      | "registerGovernorWhiteList"
      | "submitGovernorInProposal"
      | "submitGovernorOutProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearGovernorWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernorWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGovernorWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGovernorInProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGovernorOutProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allDone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearGovernorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernorWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGovernorWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGovernorInProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGovernorOutProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32,address,uint256,uint256,uint8)": EventFragment;
    "ProposalProcessed(address,bytes32,uint8,uint128,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalProcessed"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddr: string;
  proposalId: string;
  account: string;
  creationTime: BigNumber;
  stopVoteTime: BigNumber;
  pType: number;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalProcessedEventObject {
  daoAddr: string;
  proposalId: string;
  state: number;
  allVotingWeight: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
  voteResult: BigNumber;
}
export type ProposalProcessedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  ProposalProcessedEventObject
>;

export type ProposalProcessedEventFilter =
  TypedEventFilter<ProposalProcessedEvent>;

export interface ColletiveGovernorInProposalContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ColletiveGovernorInProposalContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllGovernor(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getGovernorAmount(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, number, number] & {
        id: string;
        account: string;
        allocation: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
        pType: number;
      }
    >;

    quit(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGovernorInProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGovernorOutProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allDone(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearGovernorWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllGovernor(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getGovernorAmount(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernorWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGovernorWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, number, number] & {
      id: string;
      account: string;
      allocation: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
      pType: number;
    }
  >;

  quit(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerGovernorWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGovernorInProposal(
    dao: PromiseOrValue<string>,
    applicant: PromiseOrValue<string>,
    allocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGovernorOutProposal(
    dao: PromiseOrValue<string>,
    applicant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllGovernor(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getGovernorAmount(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, number, number] & {
        id: string;
        account: string;
        allocation: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
        pType: number;
      }
    >;

    quit(dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGovernorInProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitGovernorOutProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ProposalCreated(address,bytes32,address,uint256,uint256,uint8)"(
      daoAddr?: null,
      proposalId?: null,
      account?: null,
      creationTime?: null,
      stopVoteTime?: null,
      pType?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddr?: null,
      proposalId?: null,
      account?: null,
      creationTime?: null,
      stopVoteTime?: null,
      pType?: null
    ): ProposalCreatedEventFilter;

    "ProposalProcessed(address,bytes32,uint8,uint128,uint256,uint256,uint256)"(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null,
      voteResult?: null
    ): ProposalProcessedEventFilter;
    ProposalProcessed(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null,
      voteResult?: null
    ): ProposalProcessedEventFilter;
  };

  estimateGas: {
    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllGovernor(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorAmount(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quit(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGovernorInProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGovernorOutProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllGovernor(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorAmount(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quit(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerGovernorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGovernorInProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGovernorOutProposal(
      dao: PromiseOrValue<string>,
      applicant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
