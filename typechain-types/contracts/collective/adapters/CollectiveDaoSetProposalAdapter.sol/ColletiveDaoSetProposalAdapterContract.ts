/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ColletiveDaoSetProposalAdapterContract {
  export type VotingParamsStruct = {
    votingAssetType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
    gracePeriod: PromiseOrValue<BigNumberish>;
  };

  export type VotingParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingAssetType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
    gracePeriod: BigNumber;
  };

  export type VotingSupportInfoStruct = {
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
  };

  export type VotingSupportInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
  };

  export type VotingAssetInfoStruct = {
    votingAssetType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
  };

  export type VotingAssetInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    votingAssetType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
  };

  export type VotingTimeInfoStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
    gracePeriod: PromiseOrValue<BigNumberish>;
    creationTime: PromiseOrValue<BigNumberish>;
    stopVoteTime: PromiseOrValue<BigNumberish>;
  };

  export type VotingTimeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
    gracePeriod: BigNumber;
    creationTime: BigNumber;
    stopVoteTime: BigNumber;
  };
}

export interface ColletiveDaoSetProposalAdapterContractInterface
  extends utils.Interface {
  functions: {
    "feesProposals(address,bytes32)": FunctionFragment;
    "getGovernorMembershipWhitelist(bytes32)": FunctionFragment;
    "governorMembershipProposals(address,bytes32)": FunctionFragment;
    "investorCapProposals(address,bytes32)": FunctionFragment;
    "isProposalAllDone(address)": FunctionFragment;
    "ongoingFeesProposal(address)": FunctionFragment;
    "ongoingGovernorMembershipProposal(address)": FunctionFragment;
    "ongoingInvestorCapProposal(address)": FunctionFragment;
    "ongoingProposerRewardProposal(address)": FunctionFragment;
    "ongoingVotingProposal(address)": FunctionFragment;
    "processFeesProposal(address,bytes32)": FunctionFragment;
    "processGovernorMembershipProposal(address,bytes32)": FunctionFragment;
    "processInvestorCapProposal(address,bytes32)": FunctionFragment;
    "processProposerRewardProposal(address,bytes32)": FunctionFragment;
    "processVotingProposal(address,bytes32)": FunctionFragment;
    "proposerRewardProposals(address,bytes32)": FunctionFragment;
    "submitFeesProposal(address,uint256)": FunctionFragment;
    "submitGovernorMembershpProposal(address,bool,string,uint8,uint256,address,uint256,address[])": FunctionFragment;
    "submitInvestorCapProposal(address,bool,uint256)": FunctionFragment;
    "submitProposerRewardProposal(address,uint256,uint256)": FunctionFragment;
    "submitVotingProposal(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "votingProposals(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feesProposals"
      | "getGovernorMembershipWhitelist"
      | "governorMembershipProposals"
      | "investorCapProposals"
      | "isProposalAllDone"
      | "ongoingFeesProposal"
      | "ongoingGovernorMembershipProposal"
      | "ongoingInvestorCapProposal"
      | "ongoingProposerRewardProposal"
      | "ongoingVotingProposal"
      | "processFeesProposal"
      | "processGovernorMembershipProposal"
      | "processInvestorCapProposal"
      | "processProposerRewardProposal"
      | "processVotingProposal"
      | "proposerRewardProposals"
      | "submitFeesProposal"
      | "submitGovernorMembershpProposal"
      | "submitInvestorCapProposal"
      | "submitProposerRewardProposal"
      | "submitVotingProposal"
      | "votingProposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feesProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorMembershipWhitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorCapProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalAllDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingFeesProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingGovernorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingInvestorCapProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingProposerRewardProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingVotingProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processFeesProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processGovernorMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processInvestorCapProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposerRewardProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processVotingProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposerRewardProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFeesProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGovernorMembershpProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitInvestorCapProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposerRewardProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVotingProposal",
    values: [
      PromiseOrValue<string>,
      ColletiveDaoSetProposalAdapterContract.VotingParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votingProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "feesProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorMembershipWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorCapProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalAllDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingInvestorCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingProposerRewardProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInvestorCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposerRewardProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerRewardProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGovernorMembershpProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitInvestorCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposerRewardProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingProposals",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32,uint8)": EventFragment;
    "ProposalProcessed(address,bytes32,uint8,uint256,uint128,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalProcessed"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddr: string;
  proposalId: string;
  pType: number;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, number],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalProcessedEventObject {
  daoAddr: string;
  proposalId: string;
  state: number;
  voteResult: BigNumber;
  allVotingWeight: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
}
export type ProposalProcessedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  ProposalProcessedEventObject
>;

export type ProposalProcessedEventFilter =
  TypedEventFilter<ProposalProcessedEvent>;

export interface ColletiveDaoSetProposalAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ColletiveDaoSetProposalAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        redemptionFeeAmount: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    getGovernorMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingProposerRewardProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processInvestorCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processProposerRewardProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposerRewardProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        fundFromInvestorAmount: BigNumber;
        paybackTokenFromInvestorAmount: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      redemtionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposerRewardProposal(
      dao: PromiseOrValue<string>,
      fundFromInvestorAmount: PromiseOrValue<BigNumberish>,
      paybackTokenFromInvestorAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: ColletiveDaoSetProposalAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput,
        ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput,
        ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput,
        number
      ] & {
        proposalId: string;
        supportInfo: ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput;
        votingAssetInfo: ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput;
        timeInfo: ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput;
        state: number;
      }
    >;
  };

  feesProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number] & {
      proposalId: string;
      redemptionFeeAmount: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  getGovernorMembershipWhitelist(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  governorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposalId: string;
      enable: boolean;
      name: string;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  investorCapProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
      proposalId: string;
      enable: boolean;
      cap: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  isProposalAllDone(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ongoingFeesProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingGovernorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingInvestorCapProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingProposerRewardProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingVotingProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  processFeesProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processGovernorMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processInvestorCapProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processProposerRewardProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processVotingProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposerRewardProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      proposalId: string;
      fundFromInvestorAmount: BigNumber;
      paybackTokenFromInvestorAmount: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  submitFeesProposal(
    dao: PromiseOrValue<string>,
    redemtionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGovernorMembershpProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    name: PromiseOrValue<string>,
    varifyType: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    whiteList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitInvestorCapProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposerRewardProposal(
    dao: PromiseOrValue<string>,
    fundFromInvestorAmount: PromiseOrValue<BigNumberish>,
    paybackTokenFromInvestorAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitVotingProposal(
    dao: PromiseOrValue<string>,
    params: ColletiveDaoSetProposalAdapterContract.VotingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput,
      ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput,
      ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput,
      number
    ] & {
      proposalId: string;
      supportInfo: ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput;
      votingAssetInfo: ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput;
      timeInfo: ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput;
      state: number;
    }
  >;

  callStatic: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        redemptionFeeAmount: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    getGovernorMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingProposerRewardProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processInvestorCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposerRewardProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposerRewardProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        fundFromInvestorAmount: BigNumber;
        paybackTokenFromInvestorAmount: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      redemtionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposerRewardProposal(
      dao: PromiseOrValue<string>,
      fundFromInvestorAmount: PromiseOrValue<BigNumberish>,
      paybackTokenFromInvestorAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: ColletiveDaoSetProposalAdapterContract.VotingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput,
        ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput,
        ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput,
        number
      ] & {
        proposalId: string;
        supportInfo: ColletiveDaoSetProposalAdapterContract.VotingSupportInfoStructOutput;
        votingAssetInfo: ColletiveDaoSetProposalAdapterContract.VotingAssetInfoStructOutput;
        timeInfo: ColletiveDaoSetProposalAdapterContract.VotingTimeInfoStructOutput;
        state: number;
      }
    >;
  };

  filters: {
    "ProposalCreated(address,bytes32,uint8)"(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;

    "ProposalProcessed(address,bytes32,uint8,uint256,uint128,uint256,uint256)"(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
    ProposalProcessed(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
  };

  estimateGas: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingProposerRewardProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processInvestorCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processProposerRewardProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposerRewardProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      redemtionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposerRewardProposal(
      dao: PromiseOrValue<string>,
      fundFromInvestorAmount: PromiseOrValue<BigNumberish>,
      paybackTokenFromInvestorAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: ColletiveDaoSetProposalAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingProposerRewardProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processInvestorCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processProposerRewardProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposerRewardProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      redemtionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposerRewardProposal(
      dao: PromiseOrValue<string>,
      fundFromInvestorAmount: PromiseOrValue<BigNumberish>,
      paybackTokenFromInvestorAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: ColletiveDaoSetProposalAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
