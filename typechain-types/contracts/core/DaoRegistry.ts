/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DaoRegistryInterface extends utils.Interface {
  functions: {
    "adapters(bytes32)": FunctionFragment;
    "addExtension(bytes32,address,address)": FunctionFragment;
    "addressConfiguration(bytes32)": FunctionFragment;
    "daoCreator()": FunctionFragment;
    "daoFactory()": FunctionFragment;
    "extensions(bytes32)": FunctionFragment;
    "finalizeDao()": FunctionFragment;
    "getAdapterAddress(bytes32)": FunctionFragment;
    "getAddressConfiguration(bytes32)": FunctionFragment;
    "getAddressIfDelegated(address)": FunctionFragment;
    "getAllSteward()": FunctionFragment;
    "getConfiguration(bytes32)": FunctionFragment;
    "getCurrentDelegateKey(address)": FunctionFragment;
    "getCurrentFeeProposalId()": FunctionFragment;
    "getCurrentFundEstablishmentProposalId()": FunctionFragment;
    "getCurrentGovenorInProposalId()": FunctionFragment;
    "getCurrentGovenorOutProposalId()": FunctionFragment;
    "getCurrentGovernorMembershipProposalId()": FunctionFragment;
    "getCurrentInvestmentProposalId()": FunctionFragment;
    "getCurrentInvestorMembershipProposalId()": FunctionFragment;
    "getCurrentParticipantCapProposalId()": FunctionFragment;
    "getCurrentPollForInvestorProposalId()": FunctionFragment;
    "getCurrentProposerMembershipProposalId()": FunctionFragment;
    "getCurrentVotingProposalId()": FunctionFragment;
    "getExtensionAddress(bytes32)": FunctionFragment;
    "getMemberAddress(uint256)": FunctionFragment;
    "getMemberFlag(address,uint8)": FunctionFragment;
    "getNbMembers()": FunctionFragment;
    "getPreviousDelegateKey(address)": FunctionFragment;
    "getPriorDelegateKey(address,uint256)": FunctionFragment;
    "getProposalFlag(bytes32,uint8)": FunctionFragment;
    "getProposalVoteType(uint8)": FunctionFragment;
    "hasAdapterAccess(address,uint8)": FunctionFragment;
    "hasAdapterAccessToExtension(address,address,uint8)": FunctionFragment;
    "increaseFeesId()": FunctionFragment;
    "increaseFundEstablishmentId()": FunctionFragment;
    "increaseGovenorInId()": FunctionFragment;
    "increaseGovenorOutId()": FunctionFragment;
    "increaseGovernorMembershipId()": FunctionFragment;
    "increaseInvestmentId()": FunctionFragment;
    "increaseInvstorMembershipId()": FunctionFragment;
    "increaseParticipantCapId()": FunctionFragment;
    "increasePollForInvestmentId()": FunctionFragment;
    "increaseProposerMembershipId()": FunctionFragment;
    "increaseVotingId()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "inverseAdapters(address)": FunctionFragment;
    "inverseExtensions(address)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isAdapter(address)": FunctionFragment;
    "isExtension(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "lockSession()": FunctionFragment;
    "lockedAt()": FunctionFragment;
    "mainConfiguration(bytes32)": FunctionFragment;
    "memberAddressesByDelegatedKey(address)": FunctionFragment;
    "members(address)": FunctionFragment;
    "potentialNewMember(address)": FunctionFragment;
    "processProposal(bytes32)": FunctionFragment;
    "proposalVoteTypes(uint8)": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "removeExtension(bytes32)": FunctionFragment;
    "removeMember(address)": FunctionFragment;
    "replaceAdapter(bytes32,address,uint128,bytes32[],uint256[])": FunctionFragment;
    "setAclToExtensionForAdapter(address,address,uint256)": FunctionFragment;
    "setAddressConfiguration(bytes32,address)": FunctionFragment;
    "setConfiguration(bytes32,uint256)": FunctionFragment;
    "sponsorProposal(bytes32,address)": FunctionFragment;
    "state()": FunctionFragment;
    "submitProposal(bytes32)": FunctionFragment;
    "unlockSession()": FunctionFragment;
    "updateDelegateKey(address,address)": FunctionFragment;
    "votingAdapter(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adapters"
      | "addExtension"
      | "addressConfiguration"
      | "daoCreator"
      | "daoFactory"
      | "extensions"
      | "finalizeDao"
      | "getAdapterAddress"
      | "getAddressConfiguration"
      | "getAddressIfDelegated"
      | "getAllSteward"
      | "getConfiguration"
      | "getCurrentDelegateKey"
      | "getCurrentFeeProposalId"
      | "getCurrentFundEstablishmentProposalId"
      | "getCurrentGovenorInProposalId"
      | "getCurrentGovenorOutProposalId"
      | "getCurrentGovernorMembershipProposalId"
      | "getCurrentInvestmentProposalId"
      | "getCurrentInvestorMembershipProposalId"
      | "getCurrentParticipantCapProposalId"
      | "getCurrentPollForInvestorProposalId"
      | "getCurrentProposerMembershipProposalId"
      | "getCurrentVotingProposalId"
      | "getExtensionAddress"
      | "getMemberAddress"
      | "getMemberFlag"
      | "getNbMembers"
      | "getPreviousDelegateKey"
      | "getPriorDelegateKey"
      | "getProposalFlag"
      | "getProposalVoteType"
      | "hasAdapterAccess"
      | "hasAdapterAccessToExtension"
      | "increaseFeesId"
      | "increaseFundEstablishmentId"
      | "increaseGovenorInId"
      | "increaseGovenorOutId"
      | "increaseGovernorMembershipId"
      | "increaseInvestmentId"
      | "increaseInvstorMembershipId"
      | "increaseParticipantCapId"
      | "increasePollForInvestmentId"
      | "increaseProposerMembershipId"
      | "increaseVotingId"
      | "initialize"
      | "initialized"
      | "inverseAdapters"
      | "inverseExtensions"
      | "isActiveMember"
      | "isAdapter"
      | "isExtension"
      | "isMember"
      | "lockSession"
      | "lockedAt"
      | "mainConfiguration"
      | "memberAddressesByDelegatedKey"
      | "members"
      | "potentialNewMember"
      | "processProposal"
      | "proposalVoteTypes"
      | "proposals"
      | "removeExtension"
      | "removeMember"
      | "replaceAdapter"
      | "setAclToExtensionForAdapter"
      | "setAddressConfiguration"
      | "setConfiguration"
      | "sponsorProposal"
      | "state"
      | "submitProposal"
      | "unlockSession"
      | "updateDelegateKey"
      | "votingAdapter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adapters",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addExtension",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressConfiguration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "daoCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extensions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDao",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapterAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressConfiguration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressIfDelegated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSteward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDelegateKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFeeProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFundEstablishmentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGovenorInProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGovenorOutProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGovernorMembershipProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentInvestmentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentInvestorMembershipProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentParticipantCapProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPollForInvestorProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposerMembershipProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotingProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExtensionAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberFlag",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviousDelegateKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorDelegateKey",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalFlag",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVoteType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdapterAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdapterAccessToExtension",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseFeesId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseFundEstablishmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseGovenorInId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseGovenorOutId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseGovernorMembershipId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseInvestmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseInvstorMembershipId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseParticipantCapId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePollForInvestmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseProposerMembershipId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseVotingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inverseAdapters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "inverseExtensions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdapter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExtension",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSession",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockedAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainConfiguration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberAddressesByDelegatedKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "potentialNewMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVoteTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExtension",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceAdapter",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAclToExtensionForAdapter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressConfiguration",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegateKey",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingAdapter",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "adapters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extensions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressIfDelegated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSteward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFeeProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFundEstablishmentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGovenorInProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGovenorOutProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGovernorMembershipProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInvestmentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInvestorMembershipProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentParticipantCapProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPollForInvestorProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposerMembershipProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotingProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtensionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreviousDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVoteType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAdapterAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAdapterAccessToExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseFeesId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseFundEstablishmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseGovenorInId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseGovenorOutId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseGovernorMembershipId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseInvestmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseInvstorMembershipId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseParticipantCapId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePollForInvestmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseProposerMembershipId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseVotingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inverseAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inverseExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAddressesByDelegatedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potentialNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVoteTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAclToExtensionForAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingAdapter",
    data: BytesLike
  ): Result;

  events: {
    "AdapterAdded(bytes32,address,uint256)": EventFragment;
    "AdapterRemoved(bytes32)": EventFragment;
    "AddressConfigurationUpdated(bytes32,address)": EventFragment;
    "ConfigurationUpdated(bytes32,uint256)": EventFragment;
    "ExtensionAdded(bytes32,address)": EventFragment;
    "ExtensionRemoved(bytes32)": EventFragment;
    "ProcessedProposal(bytes32,uint256)": EventFragment;
    "SponsoredProposal(bytes32,uint256,address)": EventFragment;
    "SubmittedProposal(bytes32,uint256)": EventFragment;
    "UpdateDelegateKey(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdapterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdapterRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddressConfigurationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessedProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsoredProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmittedProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDelegateKey"): EventFragment;
}

export interface AdapterAddedEventObject {
  adapterId: string;
  adapterAddress: string;
  flags: BigNumber;
}
export type AdapterAddedEvent = TypedEvent<
  [string, string, BigNumber],
  AdapterAddedEventObject
>;

export type AdapterAddedEventFilter = TypedEventFilter<AdapterAddedEvent>;

export interface AdapterRemovedEventObject {
  adapterId: string;
}
export type AdapterRemovedEvent = TypedEvent<
  [string],
  AdapterRemovedEventObject
>;

export type AdapterRemovedEventFilter = TypedEventFilter<AdapterRemovedEvent>;

export interface AddressConfigurationUpdatedEventObject {
  key: string;
  value: string;
}
export type AddressConfigurationUpdatedEvent = TypedEvent<
  [string, string],
  AddressConfigurationUpdatedEventObject
>;

export type AddressConfigurationUpdatedEventFilter =
  TypedEventFilter<AddressConfigurationUpdatedEvent>;

export interface ConfigurationUpdatedEventObject {
  key: string;
  value: BigNumber;
}
export type ConfigurationUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ConfigurationUpdatedEventObject
>;

export type ConfigurationUpdatedEventFilter =
  TypedEventFilter<ConfigurationUpdatedEvent>;

export interface ExtensionAddedEventObject {
  extensionId: string;
  extensionAddress: string;
}
export type ExtensionAddedEvent = TypedEvent<
  [string, string],
  ExtensionAddedEventObject
>;

export type ExtensionAddedEventFilter = TypedEventFilter<ExtensionAddedEvent>;

export interface ExtensionRemovedEventObject {
  extensionId: string;
}
export type ExtensionRemovedEvent = TypedEvent<
  [string],
  ExtensionRemovedEventObject
>;

export type ExtensionRemovedEventFilter =
  TypedEventFilter<ExtensionRemovedEvent>;

export interface ProcessedProposalEventObject {
  proposalId: string;
  flags: BigNumber;
}
export type ProcessedProposalEvent = TypedEvent<
  [string, BigNumber],
  ProcessedProposalEventObject
>;

export type ProcessedProposalEventFilter =
  TypedEventFilter<ProcessedProposalEvent>;

export interface SponsoredProposalEventObject {
  proposalId: string;
  flags: BigNumber;
  votingAdapter: string;
}
export type SponsoredProposalEvent = TypedEvent<
  [string, BigNumber, string],
  SponsoredProposalEventObject
>;

export type SponsoredProposalEventFilter =
  TypedEventFilter<SponsoredProposalEvent>;

export interface SubmittedProposalEventObject {
  proposalId: string;
  flags: BigNumber;
}
export type SubmittedProposalEvent = TypedEvent<
  [string, BigNumber],
  SubmittedProposalEventObject
>;

export type SubmittedProposalEventFilter =
  TypedEventFilter<SubmittedProposalEvent>;

export interface UpdateDelegateKeyEventObject {
  memberAddress: string;
  newDelegateKey: string;
}
export type UpdateDelegateKeyEvent = TypedEvent<
  [string, string],
  UpdateDelegateKeyEventObject
>;

export type UpdateDelegateKeyEventFilter =
  TypedEventFilter<UpdateDelegateKeyEvent>;

export interface DaoRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaoRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adapters(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addExtension(
      extensionId: PromiseOrValue<BytesLike>,
      extension: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    daoCreator(overrides?: CallOverrides): Promise<[string]>;

    daoFactory(overrides?: CallOverrides): Promise<[string]>;

    extensions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalizeDao(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdapterAddress(
      adapterId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressIfDelegated(
      checkAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllSteward(overrides?: CallOverrides): Promise<[string[]]>;

    getConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentFeeProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentFundEstablishmentProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentGovenorInProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentGovenorOutProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentGovernorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentInvestmentProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentInvestorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentParticipantCapProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPollForInvestorProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentProposerMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentVotingProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExtensionAddress(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMemberAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMemberFlag(
      memberAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNbMembers(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPreviousDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPriorDelegateKey(
      memberAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposalFlag(
      proposalId: PromiseOrValue<BytesLike>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProposalVoteType(
      _proposalType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasAdapterAccess(
      adapterAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAdapterAccessToExtension(
      adapterAddress: PromiseOrValue<string>,
      extensionAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseFeesId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseFundEstablishmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseGovenorInId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseGovenorOutId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseGovernorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseInvstorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseParticipantCapId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increasePollForInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseProposerMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseVotingId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      creator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      _daoFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    inverseAdapters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { id: string; acl: BigNumber }>;

    inverseExtensions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { id: string; deleted: boolean }>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAdapter(
      adapterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExtension(
      extensionAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    mainConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    memberAddressesByDelegatedKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flags: BigNumber }>;

    potentialNewMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalVoteTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapterAddress: string; flags: BigNumber }
    >;

    removeExtension(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceAdapter(
      adapterId: PromiseOrValue<BytesLike>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAclToExtensionForAdapter(
      extensionAddress: PromiseOrValue<string>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsorProposal(
      proposalId: PromiseOrValue<BytesLike>,
      votingAdapterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    submitProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelegateKey(
      memberAddr: PromiseOrValue<string>,
      newDelegateKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingAdapter(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  adapters(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  addExtension(
    extensionId: PromiseOrValue<BytesLike>,
    extension: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressConfiguration(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  daoCreator(overrides?: CallOverrides): Promise<string>;

  daoFactory(overrides?: CallOverrides): Promise<string>;

  extensions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  finalizeDao(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdapterAddress(
    adapterId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressConfiguration(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressIfDelegated(
    checkAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllSteward(overrides?: CallOverrides): Promise<string[]>;

  getConfiguration(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentDelegateKey(
    memberAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentFeeProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentFundEstablishmentProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentGovenorInProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGovenorOutProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGovernorMembershipProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentInvestmentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentInvestorMembershipProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentParticipantCapProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPollForInvestorProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentProposerMembershipProposalId(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentVotingProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  getExtensionAddress(
    extensionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMemberAddress(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMemberFlag(
    memberAddress: PromiseOrValue<string>,
    flag: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNbMembers(overrides?: CallOverrides): Promise<BigNumber>;

  getPreviousDelegateKey(
    memberAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriorDelegateKey(
    memberAddr: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalFlag(
    proposalId: PromiseOrValue<BytesLike>,
    flag: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProposalVoteType(
    _proposalType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  hasAdapterAccess(
    adapterAddress: PromiseOrValue<string>,
    flag: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAdapterAccessToExtension(
    adapterAddress: PromiseOrValue<string>,
    extensionAddress: PromiseOrValue<string>,
    flag: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseFeesId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseFundEstablishmentId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseGovenorInId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseGovenorOutId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseGovernorMembershipId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseInvestmentId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseInvstorMembershipId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseParticipantCapId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increasePollForInvestmentId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseProposerMembershipId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseVotingId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    creator: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    _daoFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  inverseAdapters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { id: string; acl: BigNumber }>;

  inverseExtensions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { id: string; deleted: boolean }>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdapter(
    adapterAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExtension(
    extensionAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockSession(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockedAt(overrides?: CallOverrides): Promise<BigNumber>;

  mainConfiguration(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  memberAddressesByDelegatedKey(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  members(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  potentialNewMember(
    memberAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processProposal(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalVoteTypes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  proposals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { adapterAddress: string; flags: BigNumber }
  >;

  removeExtension(
    extensionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    memberAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceAdapter(
    adapterId: PromiseOrValue<BytesLike>,
    adapterAddress: PromiseOrValue<string>,
    acl: PromiseOrValue<BigNumberish>,
    keys: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAclToExtensionForAdapter(
    extensionAddress: PromiseOrValue<string>,
    adapterAddress: PromiseOrValue<string>,
    acl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddressConfiguration(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfiguration(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsorProposal(
    proposalId: PromiseOrValue<BytesLike>,
    votingAdapterAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  submitProposal(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockSession(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelegateKey(
    memberAddr: PromiseOrValue<string>,
    newDelegateKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingAdapter(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    adapters(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    addExtension(
      extensionId: PromiseOrValue<BytesLike>,
      extension: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    daoCreator(overrides?: CallOverrides): Promise<string>;

    daoFactory(overrides?: CallOverrides): Promise<string>;

    extensions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeDao(overrides?: CallOverrides): Promise<void>;

    getAdapterAddress(
      adapterId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressIfDelegated(
      checkAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllSteward(overrides?: CallOverrides): Promise<string[]>;

    getConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentFeeProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFundEstablishmentProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovenorInProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovenorOutProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovernorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentInvestmentProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentInvestorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentParticipantCapProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPollForInvestorProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentProposerMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVotingProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getExtensionAddress(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMemberAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMemberFlag(
      memberAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNbMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviousDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriorDelegateKey(
      memberAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalFlag(
      proposalId: PromiseOrValue<BytesLike>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProposalVoteType(
      _proposalType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    hasAdapterAccess(
      adapterAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAdapterAccessToExtension(
      adapterAddress: PromiseOrValue<string>,
      extensionAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseFeesId(overrides?: CallOverrides): Promise<void>;

    increaseFundEstablishmentId(overrides?: CallOverrides): Promise<void>;

    increaseGovenorInId(overrides?: CallOverrides): Promise<void>;

    increaseGovenorOutId(overrides?: CallOverrides): Promise<void>;

    increaseGovernorMembershipId(overrides?: CallOverrides): Promise<void>;

    increaseInvestmentId(overrides?: CallOverrides): Promise<void>;

    increaseInvstorMembershipId(overrides?: CallOverrides): Promise<void>;

    increaseParticipantCapId(overrides?: CallOverrides): Promise<void>;

    increasePollForInvestmentId(overrides?: CallOverrides): Promise<void>;

    increaseProposerMembershipId(overrides?: CallOverrides): Promise<void>;

    increaseVotingId(overrides?: CallOverrides): Promise<void>;

    initialize(
      creator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      _daoFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    inverseAdapters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { id: string; acl: BigNumber }>;

    inverseExtensions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { id: string; deleted: boolean }>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdapter(
      adapterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExtension(
      extensionAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockSession(overrides?: CallOverrides): Promise<void>;

    lockedAt(overrides?: CallOverrides): Promise<BigNumber>;

    mainConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressesByDelegatedKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    potentialNewMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalVoteTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapterAddress: string; flags: BigNumber }
    >;

    removeExtension(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceAdapter(
      adapterId: PromiseOrValue<BytesLike>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAclToExtensionForAdapter(
      extensionAddress: PromiseOrValue<string>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorProposal(
      proposalId: PromiseOrValue<BytesLike>,
      votingAdapterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    submitProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockSession(overrides?: CallOverrides): Promise<void>;

    updateDelegateKey(
      memberAddr: PromiseOrValue<string>,
      newDelegateKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingAdapter(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdapterAdded(bytes32,address,uint256)"(
      adapterId?: null,
      adapterAddress?: null,
      flags?: null
    ): AdapterAddedEventFilter;
    AdapterAdded(
      adapterId?: null,
      adapterAddress?: null,
      flags?: null
    ): AdapterAddedEventFilter;

    "AdapterRemoved(bytes32)"(adapterId?: null): AdapterRemovedEventFilter;
    AdapterRemoved(adapterId?: null): AdapterRemovedEventFilter;

    "AddressConfigurationUpdated(bytes32,address)"(
      key?: null,
      value?: null
    ): AddressConfigurationUpdatedEventFilter;
    AddressConfigurationUpdated(
      key?: null,
      value?: null
    ): AddressConfigurationUpdatedEventFilter;

    "ConfigurationUpdated(bytes32,uint256)"(
      key?: null,
      value?: null
    ): ConfigurationUpdatedEventFilter;
    ConfigurationUpdated(
      key?: null,
      value?: null
    ): ConfigurationUpdatedEventFilter;

    "ExtensionAdded(bytes32,address)"(
      extensionId?: null,
      extensionAddress?: null
    ): ExtensionAddedEventFilter;
    ExtensionAdded(
      extensionId?: null,
      extensionAddress?: null
    ): ExtensionAddedEventFilter;

    "ExtensionRemoved(bytes32)"(
      extensionId?: null
    ): ExtensionRemovedEventFilter;
    ExtensionRemoved(extensionId?: null): ExtensionRemovedEventFilter;

    "ProcessedProposal(bytes32,uint256)"(
      proposalId?: null,
      flags?: null
    ): ProcessedProposalEventFilter;
    ProcessedProposal(
      proposalId?: null,
      flags?: null
    ): ProcessedProposalEventFilter;

    "SponsoredProposal(bytes32,uint256,address)"(
      proposalId?: null,
      flags?: null,
      votingAdapter?: null
    ): SponsoredProposalEventFilter;
    SponsoredProposal(
      proposalId?: null,
      flags?: null,
      votingAdapter?: null
    ): SponsoredProposalEventFilter;

    "SubmittedProposal(bytes32,uint256)"(
      proposalId?: null,
      flags?: null
    ): SubmittedProposalEventFilter;
    SubmittedProposal(
      proposalId?: null,
      flags?: null
    ): SubmittedProposalEventFilter;

    "UpdateDelegateKey(address,address)"(
      memberAddress?: null,
      newDelegateKey?: null
    ): UpdateDelegateKeyEventFilter;
    UpdateDelegateKey(
      memberAddress?: null,
      newDelegateKey?: null
    ): UpdateDelegateKeyEventFilter;
  };

  estimateGas: {
    adapters(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addExtension(
      extensionId: PromiseOrValue<BytesLike>,
      extension: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoCreator(overrides?: CallOverrides): Promise<BigNumber>;

    daoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    extensions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeDao(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdapterAddress(
      adapterId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressIfDelegated(
      checkAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllSteward(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentFeeProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFundEstablishmentProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovenorInProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovenorOutProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGovernorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentInvestmentProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentInvestorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentParticipantCapProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPollForInvestorProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentProposerMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVotingProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    getExtensionAddress(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberFlag(
      memberAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviousDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorDelegateKey(
      memberAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalFlag(
      proposalId: PromiseOrValue<BytesLike>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVoteType(
      _proposalType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAdapterAccess(
      adapterAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAdapterAccessToExtension(
      adapterAddress: PromiseOrValue<string>,
      extensionAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseFeesId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseFundEstablishmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseGovenorInId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseGovenorOutId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseGovernorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseInvstorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseParticipantCapId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increasePollForInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseProposerMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseVotingId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      creator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      _daoFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    inverseAdapters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inverseExtensions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdapter(
      adapterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExtension(
      extensionAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockedAt(overrides?: CallOverrides): Promise<BigNumber>;

    mainConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressesByDelegatedKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    potentialNewMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalVoteTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeExtension(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceAdapter(
      adapterId: PromiseOrValue<BytesLike>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAclToExtensionForAdapter(
      extensionAddress: PromiseOrValue<string>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsorProposal(
      proposalId: PromiseOrValue<BytesLike>,
      votingAdapterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelegateKey(
      memberAddr: PromiseOrValue<string>,
      newDelegateKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingAdapter(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adapters(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addExtension(
      extensionId: PromiseOrValue<BytesLike>,
      extension: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extensions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeDao(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdapterAddress(
      adapterId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressIfDelegated(
      checkAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllSteward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfiguration(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFeeProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFundEstablishmentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentGovenorInProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentGovenorOutProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentGovernorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentInvestmentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentInvestorMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentParticipantCapProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPollForInvestorProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentProposerMembershipProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotingProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtensionAddress(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberFlag(
      memberAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPreviousDelegateKey(
      memberAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorDelegateKey(
      memberAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalFlag(
      proposalId: PromiseOrValue<BytesLike>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVoteType(
      _proposalType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAdapterAccess(
      adapterAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAdapterAccessToExtension(
      adapterAddress: PromiseOrValue<string>,
      extensionAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseFeesId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseFundEstablishmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseGovenorInId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseGovenorOutId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseGovernorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseInvstorMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseParticipantCapId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increasePollForInvestmentId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseProposerMembershipId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseVotingId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      creator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      _daoFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inverseAdapters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inverseExtensions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdapter(
      adapterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExtension(
      extensionAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainConfiguration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAddressesByDelegatedKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    potentialNewMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalVoteTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeExtension(
      extensionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      memberAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceAdapter(
      adapterId: PromiseOrValue<BytesLike>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAclToExtensionForAdapter(
      extensionAddress: PromiseOrValue<string>,
      adapterAddress: PromiseOrValue<string>,
      acl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddressConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsorProposal(
      proposalId: PromiseOrValue<BytesLike>,
      votingAdapterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockSession(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelegateKey(
      memberAddr: PromiseOrValue<string>,
      newDelegateKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingAdapter(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
