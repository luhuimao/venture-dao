/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IManaging {
  export type ProposalDetailsStruct = {
    adapterOrExtensionId: PromiseOrValue<BytesLike>;
    adapterOrExtensionAddr: PromiseOrValue<string>;
    updateType: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    keys: PromiseOrValue<BytesLike>[];
    values: PromiseOrValue<BigNumberish>[];
    extensionAddresses: PromiseOrValue<string>[];
    extensionAclFlags: PromiseOrValue<BigNumberish>[];
  };

  export type ProposalDetailsStructOutput = [
    string,
    string,
    number,
    BigNumber,
    string[],
    BigNumber[],
    string[],
    BigNumber[]
  ] & {
    adapterOrExtensionId: string;
    adapterOrExtensionAddr: string;
    updateType: number;
    flags: BigNumber;
    keys: string[];
    values: BigNumber[];
    extensionAddresses: string[];
    extensionAclFlags: BigNumber[];
  };

  export type ConfigurationStruct = {
    key: PromiseOrValue<BytesLike>;
    numericValue: PromiseOrValue<BigNumberish>;
    addressValue: PromiseOrValue<string>;
    configType: PromiseOrValue<BigNumberish>;
  };

  export type ConfigurationStructOutput = [
    string,
    BigNumber,
    string,
    number
  ] & {
    key: string;
    numericValue: BigNumber;
    addressValue: string;
    configType: number;
  };
}

export interface IManagingInterface extends utils.Interface {
  functions: {
    "processProposal(address,bytes32)": FunctionFragment;
    "submitProposal(address,(bytes32,address,uint8,uint128,bytes32[],uint256[],address[],uint128[]),(bytes32,uint256,address,uint8)[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "processProposal" | "submitProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "processProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      PromiseOrValue<string>,
      IManaging.ProposalDetailsStruct,
      IManaging.ConfigurationStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IManaging extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IManagingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      proposal: IManaging.ProposalDetailsStruct,
      configs: IManaging.ConfigurationStruct[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  processProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    dao: PromiseOrValue<string>,
    proposal: IManaging.ProposalDetailsStruct,
    configs: IManaging.ConfigurationStruct[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      dao: PromiseOrValue<string>,
      proposal: IManaging.ProposalDetailsStruct,
      configs: IManaging.ConfigurationStruct[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposal(
      dao: PromiseOrValue<string>,
      proposal: IManaging.ProposalDetailsStruct,
      configs: IManaging.ConfigurationStruct[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      proposal: IManaging.ProposalDetailsStruct,
      configs: IManaging.ConfigurationStruct[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
