/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace FlexDaosetLibrary {
  export type GovernorMembershipParamsStruct = {
    dao: PromiseOrValue<string>;
    enable: PromiseOrValue<boolean>;
    varifyType: PromiseOrValue<BigNumberish>;
    minAmount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type GovernorMembershipParamsStructOutput = [
    string,
    boolean,
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    dao: string;
    enable: boolean;
    varifyType: number;
    minAmount: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type InvestorMembershipParamsStruct = {
    dao: PromiseOrValue<string>;
    enable: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
    varifyType: PromiseOrValue<BigNumberish>;
    minAmount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type InvestorMembershipParamsStructOutput = [
    string,
    boolean,
    string,
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    dao: string;
    enable: boolean;
    name: string;
    varifyType: number;
    minAmount: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type FlexDaoPollsterMembershipInfoStruct = {
    varifyType: PromiseOrValue<BigNumberish>;
    minHolding: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type FlexDaoPollsterMembershipInfoStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    varifyType: number;
    minHolding: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type FlexDaoPollingInfoStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    votingPower: PromiseOrValue<BigNumberish>;
    superMajority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    eligibilityType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
  };

  export type FlexDaoPollingInfoStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingPeriod: BigNumber;
    votingPower: number;
    superMajority: BigNumber;
    quorum: BigNumber;
    eligibilityType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
  };

  export type PollForInvestmentParamsStruct = {
    dao: PromiseOrValue<string>;
    pollsterMembership: FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStruct;
    pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStruct;
  };

  export type PollForInvestmentParamsStructOutput = [
    string,
    FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStructOutput,
    FlexDaosetLibrary.FlexDaoPollingInfoStructOutput
  ] & {
    dao: string;
    pollsterMembership: FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStructOutput;
    pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStructOutput;
  };

  export type ProposerMembershipParamsStruct = {
    dao: PromiseOrValue<string>;
    proposerMembershipEnable: PromiseOrValue<boolean>;
    varifyType: PromiseOrValue<BigNumberish>;
    minHolding: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type ProposerMembershipParamsStructOutput = [
    string,
    boolean,
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    dao: string;
    proposerMembershipEnable: boolean;
    varifyType: number;
    minHolding: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type VotingParamsStruct = {
    dao: PromiseOrValue<string>;
    eligibilityType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
    governors: PromiseOrValue<string>[];
    allocations: PromiseOrValue<BigNumberish>[];
  };

  export type VotingParamsStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    BigNumber[]
  ] & {
    dao: string;
    eligibilityType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
    governors: string[];
    allocations: BigNumber[];
  };
}

export interface FlexDaoSetAdapterContractInterface extends utils.Interface {
  functions: {
    "feesProposals(address,bytes32)": FunctionFragment;
    "getGovernorWhitelist(bytes32)": FunctionFragment;
    "getInvestorWhitelist(bytes32)": FunctionFragment;
    "getProposerMembershipWhitelist(bytes32)": FunctionFragment;
    "governorMembershipProposals(address,bytes32)": FunctionFragment;
    "investorMembershipProposals(address,bytes32)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isProposalAllDone(address)": FunctionFragment;
    "ongoingFeesProposal(address)": FunctionFragment;
    "ongoingGovernorMembershipProposal(address)": FunctionFragment;
    "ongoingInvstorMembershipProposal(address)": FunctionFragment;
    "ongoingParticipantCapProposal(address)": FunctionFragment;
    "ongoingProposerMembershipProposal(address)": FunctionFragment;
    "participantCapProposals(address,bytes32)": FunctionFragment;
    "processFeesProposal(address,bytes32)": FunctionFragment;
    "processGovernorMembershipProposal(address,bytes32)": FunctionFragment;
    "processInvestorMembershipProposal(address,bytes32)": FunctionFragment;
    "processParticipantCapProposal(address,bytes32)": FunctionFragment;
    "processPollForInvestmentProposal(address,bytes32)": FunctionFragment;
    "processProposerMembershipProposal(address,bytes32)": FunctionFragment;
    "processVotingProposal(address,bytes32)": FunctionFragment;
    "proposerMembershipProposals(address,bytes32)": FunctionFragment;
    "submitFeesProposal(address,uint256,uint256,address)": FunctionFragment;
    "submitGovernorMembershpProposal((address,bool,uint8,uint256,address,uint256,address[]))": FunctionFragment;
    "submitInvestorMembershipProposal((address,bool,string,uint8,uint256,address,uint256,address[]))": FunctionFragment;
    "submitParticipantCapProposal(address,bool,uint256)": FunctionFragment;
    "submitPollForInvestmentProposal((address,(uint8,uint256,address,uint256,address[]),(uint256,uint8,uint256,uint256,uint256,address,uint256,uint256,uint256)))": FunctionFragment;
    "submitProposerMembershipProposal((address,bool,uint8,uint256,address,uint256,address[]))": FunctionFragment;
    "submitVotingProposal((address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],uint256[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feesProposals"
      | "getGovernorWhitelist"
      | "getInvestorWhitelist"
      | "getProposerMembershipWhitelist"
      | "governorMembershipProposals"
      | "investorMembershipProposals"
      | "isActiveMember"
      | "isProposalAllDone"
      | "ongoingFeesProposal"
      | "ongoingGovernorMembershipProposal"
      | "ongoingInvstorMembershipProposal"
      | "ongoingParticipantCapProposal"
      | "ongoingProposerMembershipProposal"
      | "participantCapProposals"
      | "processFeesProposal"
      | "processGovernorMembershipProposal"
      | "processInvestorMembershipProposal"
      | "processParticipantCapProposal"
      | "processPollForInvestmentProposal"
      | "processProposerMembershipProposal"
      | "processVotingProposal"
      | "proposerMembershipProposals"
      | "submitFeesProposal"
      | "submitGovernorMembershpProposal"
      | "submitInvestorMembershipProposal"
      | "submitParticipantCapProposal"
      | "submitPollForInvestmentProposal"
      | "submitProposerMembershipProposal"
      | "submitVotingProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feesProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorWhitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorWhitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerMembershipWhitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalAllDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingFeesProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingGovernorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingInvstorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingParticipantCapProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingProposerMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "participantCapProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processFeesProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processGovernorMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processInvestorMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processParticipantCapProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPollForInvestmentProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposerMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processVotingProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposerMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFeesProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGovernorMembershpProposal",
    values: [FlexDaosetLibrary.GovernorMembershipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitInvestorMembershipProposal",
    values: [FlexDaosetLibrary.InvestorMembershipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitParticipantCapProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPollForInvestmentProposal",
    values: [FlexDaosetLibrary.PollForInvestmentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposerMembershipProposal",
    values: [FlexDaosetLibrary.ProposerMembershipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVotingProposal",
    values: [FlexDaosetLibrary.VotingParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "feesProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerMembershipWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalAllDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingInvstorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingProposerMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantCapProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInvestorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPollForInvestmentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposerMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGovernorMembershpProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitInvestorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPollForInvestmentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposerMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVotingProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32,uint8)": EventFragment;
    "ProposalProcessed(address,bytes32,uint256,uint128,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalProcessed"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddr: string;
  proposalId: string;
  pType: number;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, number],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalProcessedEventObject {
  daoAddr: string;
  proposalId: string;
  voteResult: BigNumber;
  allVotingWeight: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
}
export type ProposalProcessedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ProposalProcessedEventObject
>;

export type ProposalProcessedEventFilter =
  TypedEventFilter<ProposalProcessedEvent>;

export interface FlexDaoSetAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexDaoSetAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
        flexDaoManagementfee: BigNumber;
        returnTokenManagementFee: BigNumber;
        managementFeeAddress: string;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    getGovernorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getInvestorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getProposerMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, number] & {
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processProposerMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposerMembershipEnable: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      returnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGovernorMembershpProposal(
      params: FlexDaosetLibrary.GovernorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitInvestorMembershipProposal(
      params: FlexDaosetLibrary.InvestorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposerMembershipProposal(
      params: FlexDaosetLibrary.ProposerMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitVotingProposal(
      params: FlexDaosetLibrary.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  feesProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
      flexDaoManagementfee: BigNumber;
      returnTokenManagementFee: BigNumber;
      managementFeeAddress: string;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  getGovernorWhitelist(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getInvestorWhitelist(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProposerMembershipWhitelist(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  governorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      enable: boolean;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  investorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      enable: boolean;
      name: string;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposalAllDone(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ongoingFeesProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingGovernorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingInvstorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingParticipantCapProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingProposerMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  participantCapProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, number] & {
      enable: boolean;
      cap: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  processFeesProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processGovernorMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processInvestorMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processParticipantCapProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPollForInvestmentProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processProposerMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processVotingProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposerMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposerMembershipEnable: boolean;
      varifyType: number;
      minHolding: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  submitFeesProposal(
    dao: PromiseOrValue<string>,
    flexDaoManagementfee: PromiseOrValue<BigNumberish>,
    returnTokenManagementFee: PromiseOrValue<BigNumberish>,
    managementFeeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGovernorMembershpProposal(
    params: FlexDaosetLibrary.GovernorMembershipParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitInvestorMembershipProposal(
    params: FlexDaosetLibrary.InvestorMembershipParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitParticipantCapProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitPollForInvestmentProposal(
    params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposerMembershipProposal(
    params: FlexDaosetLibrary.ProposerMembershipParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitVotingProposal(
    params: FlexDaosetLibrary.VotingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
        flexDaoManagementfee: BigNumber;
        returnTokenManagementFee: BigNumber;
        managementFeeAddress: string;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    getGovernorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getInvestorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProposerMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, number] & {
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposerMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposerMembershipEnable: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      returnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGovernorMembershpProposal(
      params: FlexDaosetLibrary.GovernorMembershipParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitInvestorMembershipProposal(
      params: FlexDaosetLibrary.InvestorMembershipParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposerMembershipProposal(
      params: FlexDaosetLibrary.ProposerMembershipParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVotingProposal(
      params: FlexDaosetLibrary.VotingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProposalCreated(address,bytes32,uint8)"(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;

    "ProposalProcessed(address,bytes32,uint256,uint128,uint256,uint256)"(
      daoAddr?: null,
      proposalId?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
    ProposalProcessed(
      daoAddr?: null,
      proposalId?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
  };

  estimateGas: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposerMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processProposerMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      returnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGovernorMembershpProposal(
      params: FlexDaosetLibrary.GovernorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitInvestorMembershipProposal(
      params: FlexDaosetLibrary.InvestorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposerMembershipProposal(
      params: FlexDaosetLibrary.ProposerMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitVotingProposal(
      params: FlexDaosetLibrary.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestorWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposerMembershipWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalAllDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processFeesProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processProposerMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitFeesProposal(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      returnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGovernorMembershpProposal(
      params: FlexDaosetLibrary.GovernorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitInvestorMembershipProposal(
      params: FlexDaosetLibrary.InvestorMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposerMembershipProposal(
      params: FlexDaosetLibrary.ProposerMembershipParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitVotingProposal(
      params: FlexDaosetLibrary.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
