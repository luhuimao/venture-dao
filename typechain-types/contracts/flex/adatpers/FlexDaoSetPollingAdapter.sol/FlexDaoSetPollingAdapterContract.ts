/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace FlexDaosetLibrary {
  export type FlexDaoPollingInfoStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    votingPower: PromiseOrValue<BigNumberish>;
    superMajority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    eligibilityType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
  };

  export type FlexDaoPollingInfoStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingPeriod: BigNumber;
    votingPower: number;
    superMajority: BigNumber;
    quorum: BigNumber;
    eligibilityType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
  };

  export type FlexDaoPollsterMembershipInfoStruct = {
    varifyType: PromiseOrValue<BigNumberish>;
    minHolding: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type FlexDaoPollsterMembershipInfoStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    varifyType: number;
    minHolding: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type PollForInvestmentParamsStruct = {
    dao: PromiseOrValue<string>;
    pollsterMembership: FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStruct;
    pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStruct;
  };

  export type PollForInvestmentParamsStructOutput = [
    string,
    FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStructOutput,
    FlexDaosetLibrary.FlexDaoPollingInfoStructOutput
  ] & {
    dao: string;
    pollsterMembership: FlexDaosetLibrary.FlexDaoPollsterMembershipInfoStructOutput;
    pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStructOutput;
  };
}

export interface FlexDaoSetPollingAdapterContractInterface
  extends utils.Interface {
  functions: {
    "getWhitelist(bytes32)": FunctionFragment;
    "ongoingPollForInvestmentProposal(address)": FunctionFragment;
    "pollForInvestmentProposals(address,bytes32)": FunctionFragment;
    "processPollForInvestmentProposal(address,bytes32)": FunctionFragment;
    "submitPollForInvestmentProposal((address,(uint8,uint256,address,uint256,address[]),(uint256,uint8,uint256,uint256,uint256,address,uint256,uint256,uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getWhitelist"
      | "ongoingPollForInvestmentProposal"
      | "pollForInvestmentProposals"
      | "processPollForInvestmentProposal"
      | "submitPollForInvestmentProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getWhitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingPollForInvestmentProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pollForInvestmentProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPollForInvestmentProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPollForInvestmentProposal",
    values: [FlexDaosetLibrary.PollForInvestmentParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingPollForInvestmentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pollForInvestmentProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPollForInvestmentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPollForInvestmentProposal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FlexDaoSetPollingAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexDaoSetPollingAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    ongoingPollForInvestmentProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pollForInvestmentProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        string,
        BigNumber,
        FlexDaosetLibrary.FlexDaoPollingInfoStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStructOutput;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getWhitelist(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ongoingPollForInvestmentProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pollForInvestmentProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      string,
      BigNumber,
      FlexDaosetLibrary.FlexDaoPollingInfoStructOutput,
      BigNumber,
      BigNumber,
      number
    ] & {
      varifyType: number;
      minHolding: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStructOutput;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  processPollForInvestmentProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitPollForInvestmentProposal(
    params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ongoingPollForInvestmentProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pollForInvestmentProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        string,
        BigNumber,
        FlexDaosetLibrary.FlexDaoPollingInfoStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        pollingInfo: FlexDaosetLibrary.FlexDaoPollingInfoStructOutput;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber, BigNumber]>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingPollForInvestmentProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pollForInvestmentProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWhitelist(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingPollForInvestmentProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pollForInvestmentProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processPollForInvestmentProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitPollForInvestmentProposal(
      params: FlexDaosetLibrary.PollForInvestmentParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
