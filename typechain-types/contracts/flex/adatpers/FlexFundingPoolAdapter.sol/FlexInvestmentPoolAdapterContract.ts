/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface FlexInvestmentPoolAdapterContractInterface
  extends utils.Interface {
  functions: {
    "balanceOf(address,bytes32,address)": FunctionFragment;
    "clearInvestorWhitelist(address,string)": FunctionFragment;
    "createParticipantMembership(address,string,uint8,uint256,address,uint256)": FunctionFragment;
    "deposit(address,bytes32,uint256)": FunctionFragment;
    "escorwExtraFreeInFund(address,bytes32)": FunctionFragment;
    "freeINPriorityDeposits(address,bytes32)": FunctionFragment;
    "getParticipanWhitelist(address,string)": FunctionFragment;
    "getParticipantMembershipInfo(address,string)": FunctionFragment;
    "getPriorityDepositWhitelist(address)": FunctionFragment;
    "getTotalFundByProposalId(address,bytes32)": FunctionFragment;
    "ifInRedemptionPeriod(address,uint256)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isParticipantWhiteList(address,string,address)": FunctionFragment;
    "isPriorityDepositWhitelist(address,address)": FunctionFragment;
    "participantMemberShips(address,bytes32)": FunctionFragment;
    "registerParticipantWhiteList(address,string,address)": FunctionFragment;
    "registerPriorityDepositWhiteList(address,address)": FunctionFragment;
    "withdraw(address,bytes32,uint160)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "clearInvestorWhitelist"
      | "createParticipantMembership"
      | "deposit"
      | "escorwExtraFreeInFund"
      | "freeINPriorityDeposits"
      | "getParticipanWhitelist"
      | "getParticipantMembershipInfo"
      | "getPriorityDepositWhitelist"
      | "getTotalFundByProposalId"
      | "ifInRedemptionPeriod"
      | "isActiveMember"
      | "isParticipantWhiteList"
      | "isPriorityDepositWhitelist"
      | "participantMemberShips"
      | "registerParticipantWhiteList"
      | "registerPriorityDepositWhiteList"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clearInvestorWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createParticipantMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escorwExtraFreeInFund",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "freeINPriorityDeposits",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipanWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantMembershipInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityDepositWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFundByProposalId",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ifInRedemptionPeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipantWhiteList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriorityDepositWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "participantMemberShips",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerParticipantWhiteList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPriorityDepositWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearInvestorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createParticipantMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escorwExtraFreeInFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeINPriorityDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipanWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantMembershipInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityDepositWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFundByProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ifInRedemptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipantWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriorityDepositWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantMemberShips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerParticipantWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPriorityDepositWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,bytes32,uint256,address)": EventFragment;
    "WithDraw(address,bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDraw"): EventFragment;
}

export interface DepositEventObject {
  daoAddress: string;
  proposalId: string;
  amount: BigNumber;
  account: string;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithDrawEventObject {
  daoAddress: string;
  proposalId: string;
  amount: BigNumber;
  account: string;
}
export type WithDrawEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithDrawEventObject
>;

export type WithDrawEventFilter = TypedEventFilter<WithDrawEvent>;

export interface FlexInvestmentPoolAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexInvestmentPoolAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createParticipantMembership(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escorwExtraFreeInFund(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getParticipanWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getParticipantMembershipInfo(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string, BigNumber] & {
        created: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    getPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalFundByProposalId(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    participantMemberShips(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string, BigNumber] & {
        created: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    registerParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPriorityDepositWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearInvestorWhitelist(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createParticipantMembership(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    varifyType: PromiseOrValue<BigNumberish>,
    minHolding: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escorwExtraFreeInFund(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeINPriorityDeposits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParticipanWhitelist(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getParticipantMembershipInfo(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, string, BigNumber] & {
      created: boolean;
      varifyType: number;
      minHolding: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
    }
  >;

  getPriorityDepositWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalFundByProposalId(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ifInRedemptionPeriod(
    dao: PromiseOrValue<string>,
    timeStamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isParticipantWhiteList(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPriorityDepositWhitelist(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  participantMemberShips(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, string, BigNumber] & {
      created: boolean;
      varifyType: number;
      minHolding: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
    }
  >;

  registerParticipantWhiteList(
    dao: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPriorityDepositWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createParticipantMembership(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escorwExtraFreeInFund(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipanWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getParticipantMembershipInfo(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string, BigNumber] & {
        created: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    getPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalFundByProposalId(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    participantMemberShips(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string, BigNumber] & {
        created: boolean;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    registerParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPriorityDepositWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,bytes32,uint256,address)"(
      daoAddress?: null,
      proposalId?: null,
      amount?: null,
      account?: null
    ): DepositEventFilter;
    Deposit(
      daoAddress?: null,
      proposalId?: null,
      amount?: null,
      account?: null
    ): DepositEventFilter;

    "WithDraw(address,bytes32,uint256,address)"(
      daoAddress?: null,
      proposalId?: null,
      amount?: null,
      account?: null
    ): WithDrawEventFilter;
    WithDraw(
      daoAddress?: null,
      proposalId?: null,
      amount?: null,
      account?: null
    ): WithDrawEventFilter;
  };

  estimateGas: {
    balanceOf(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createParticipantMembership(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escorwExtraFreeInFund(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipanWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipantMembershipInfo(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalFundByProposalId(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participantMemberShips(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPriorityDepositWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createParticipantMembership(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escorwExtraFreeInFund(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipanWhitelist(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipantMembershipInfo(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalFundByProposalId(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPriorityDepositWhitelist(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participantMemberShips(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerParticipantWhiteList(
      dao: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPriorityDepositWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
