/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface FlexDaoSetProxyContractInterface extends utils.Interface {
  functions: {
    "daosetImplContrAddr()": FunctionFragment;
    "feesProposals(address,bytes32)": FunctionFragment;
    "governorMembershipProposals(address,bytes32)": FunctionFragment;
    "investorCapProposals(address,bytes32)": FunctionFragment;
    "investorMembershipProposals(address,bytes32)": FunctionFragment;
    "ongoingFeesProposal(address)": FunctionFragment;
    "ongoingGovernorMembershipProposal(address)": FunctionFragment;
    "ongoingInvestorCapProposal(address)": FunctionFragment;
    "ongoingInvstorMembershipProposal(address)": FunctionFragment;
    "ongoingProposerMembershipProposal(address)": FunctionFragment;
    "proposerMembershipProposals(address,bytes32)": FunctionFragment;
    "submitInvestorCapProposal(address,bool,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "daosetImplContrAddr"
      | "feesProposals"
      | "governorMembershipProposals"
      | "investorCapProposals"
      | "investorMembershipProposals"
      | "ongoingFeesProposal"
      | "ongoingGovernorMembershipProposal"
      | "ongoingInvestorCapProposal"
      | "ongoingInvstorMembershipProposal"
      | "ongoingProposerMembershipProposal"
      | "proposerMembershipProposals"
      | "submitInvestorCapProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "daosetImplContrAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorCapProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingFeesProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingGovernorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingInvestorCapProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingInvstorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingProposerMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposerMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitInvestorCapProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "daosetImplContrAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorCapProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingFeesProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingInvestorCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingInvstorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingProposerMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitInvestorCapProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
}

export interface ProposalCreatedEventObject {
  proposalId: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface FlexDaoSetProxyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexDaoSetProxyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    daosetImplContrAddr(overrides?: CallOverrides): Promise<[string]>;

    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
        flexDaoManagementfee: BigNumber;
        returnTokenManagementFee: BigNumber;
        managementFeeAddress: string;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, number] & {
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposerMembershipEnable: boolean;
        name: string;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  daosetImplContrAddr(overrides?: CallOverrides): Promise<string>;

  feesProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
      flexDaoManagementfee: BigNumber;
      returnTokenManagementFee: BigNumber;
      managementFeeAddress: string;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  governorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      enable: boolean;
      name: string;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  investorCapProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, number] & {
      enable: boolean;
      cap: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  investorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      enable: boolean;
      name: string;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  ongoingFeesProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingGovernorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingInvestorCapProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingInvstorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingProposerMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  proposerMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposerMembershipEnable: boolean;
      name: string;
      varifyType: number;
      minHolding: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  submitInvestorCapProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    daosetImplContrAddr(overrides?: CallOverrides): Promise<string>;

    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, number] & {
        flexDaoManagementfee: BigNumber;
        returnTokenManagementFee: BigNumber;
        managementFeeAddress: string;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, number] & {
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        enable: boolean;
        name: string;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposerMembershipEnable: boolean;
        name: string;
        varifyType: number;
        minHolding: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProposalCreated(bytes)"(proposalId?: null): ProposalCreatedEventFilter;
    ProposalCreated(proposalId?: null): ProposalCreatedEventFilter;
  };

  estimateGas: {
    daosetImplContrAddr(overrides?: CallOverrides): Promise<BigNumber>;

    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daosetImplContrAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingFeesProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingInvestorCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingProposerMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposerMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitInvestorCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
