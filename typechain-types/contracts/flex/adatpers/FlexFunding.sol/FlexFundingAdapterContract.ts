/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IFlexFunding {
  export type ProposalInvestmentInfoStruct = {
    tokenAddress: PromiseOrValue<string>;
    minInvestmentAmount: PromiseOrValue<BigNumberish>;
    maxInvestmentAmount: PromiseOrValue<BigNumberish>;
    finalRaisedAmount: PromiseOrValue<BigNumberish>;
    escrow: PromiseOrValue<boolean>;
    paybackTokenAddr: PromiseOrValue<string>;
    paybackTokenAmount: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    minReturnAmount: PromiseOrValue<BigNumberish>;
    maxReturnAmount: PromiseOrValue<BigNumberish>;
    approverAddr: PromiseOrValue<string>;
    recipientAddr: PromiseOrValue<string>;
  };

  export type ProposalInvestmentInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    tokenAddress: string;
    minInvestmentAmount: BigNumber;
    maxInvestmentAmount: BigNumber;
    finalRaisedAmount: BigNumber;
    escrow: boolean;
    paybackTokenAddr: string;
    paybackTokenAmount: BigNumber;
    price: BigNumber;
    minReturnAmount: BigNumber;
    maxReturnAmount: BigNumber;
    approverAddr: string;
    recipientAddr: string;
  };

  export type VestInfoStruct = {
    vestingStartTime: PromiseOrValue<BigNumberish>;
    vestingCliffEndTime: PromiseOrValue<BigNumberish>;
    vestingEndTime: PromiseOrValue<BigNumberish>;
    vestingInterval: PromiseOrValue<BigNumberish>;
    vestingCliffLockAmount: PromiseOrValue<BigNumberish>;
    nftEnable: PromiseOrValue<boolean>;
    erc721: PromiseOrValue<string>;
    vestName: PromiseOrValue<string>;
    vestDescription: PromiseOrValue<string>;
  };

  export type VestInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    string
  ] & {
    vestingStartTime: BigNumber;
    vestingCliffEndTime: BigNumber;
    vestingEndTime: BigNumber;
    vestingInterval: BigNumber;
    vestingCliffLockAmount: BigNumber;
    nftEnable: boolean;
    erc721: string;
    vestName: string;
    vestDescription: string;
  };

  export type InvestorIdentificationInfoStruct = {
    bType: PromiseOrValue<BigNumberish>;
    bChainId: PromiseOrValue<BigNumberish>;
    bTokanAddr: PromiseOrValue<string>;
    bTokenId: PromiseOrValue<BigNumberish>;
    bMinHoldingAmount: PromiseOrValue<BigNumberish>;
  };

  export type InvestorIdentificationInfoStructOutput = [
    number,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    bType: number;
    bChainId: number;
    bTokanAddr: string;
    bTokenId: BigNumber;
    bMinHoldingAmount: BigNumber;
  };

  export type PriorityDepositInfoStruct = {
    enable: PromiseOrValue<boolean>;
    pType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PriorityDepositInfoStructOutput = [
    boolean,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    enable: boolean;
    pType: number;
    token: string;
    tokenId: BigNumber;
    amount: BigNumber;
  };

  export type FundRaiseInfoStruct = {
    fundRaiseType: PromiseOrValue<BigNumberish>;
    fundRaiseStartTime: PromiseOrValue<BigNumberish>;
    fundRaiseEndTime: PromiseOrValue<BigNumberish>;
    minDepositAmount: PromiseOrValue<BigNumberish>;
    maxDepositAmount: PromiseOrValue<BigNumberish>;
    investorIdentification: PromiseOrValue<boolean>;
    investorIdentificationInfo: IFlexFunding.InvestorIdentificationInfoStruct;
    priorityDepositInfo: IFlexFunding.PriorityDepositInfoStruct;
  };

  export type FundRaiseInfoStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    IFlexFunding.InvestorIdentificationInfoStructOutput,
    IFlexFunding.PriorityDepositInfoStructOutput
  ] & {
    fundRaiseType: number;
    fundRaiseStartTime: BigNumber;
    fundRaiseEndTime: BigNumber;
    minDepositAmount: BigNumber;
    maxDepositAmount: BigNumber;
    investorIdentification: boolean;
    investorIdentificationInfo: IFlexFunding.InvestorIdentificationInfoStructOutput;
    priorityDepositInfo: IFlexFunding.PriorityDepositInfoStructOutput;
  };

  export type ProposerRewardInfoStruct = {
    tokenRewardAmount: PromiseOrValue<BigNumberish>;
    cashRewardAmount: PromiseOrValue<BigNumberish>;
  };

  export type ProposerRewardInfoStructOutput = [BigNumber, BigNumber] & {
    tokenRewardAmount: BigNumber;
    cashRewardAmount: BigNumber;
  };

  export type InvestmentInfoStruct = {
    tokenAddress: PromiseOrValue<string>;
    minInvestmentAmount: PromiseOrValue<BigNumberish>;
    maxInvestmentAmount: PromiseOrValue<BigNumberish>;
    escrow: PromiseOrValue<boolean>;
    paybackTokenAddr: PromiseOrValue<string>;
    paybackTokenAmount: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    minReturnAmount: PromiseOrValue<BigNumberish>;
    maxReturnAmount: PromiseOrValue<BigNumberish>;
    approverAddr: PromiseOrValue<string>;
    recipientAddr: PromiseOrValue<string>;
  };

  export type InvestmentInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    tokenAddress: string;
    minInvestmentAmount: BigNumber;
    maxInvestmentAmount: BigNumber;
    escrow: boolean;
    paybackTokenAddr: string;
    paybackTokenAmount: BigNumber;
    price: BigNumber;
    minReturnAmount: BigNumber;
    maxReturnAmount: BigNumber;
    approverAddr: string;
    recipientAddr: string;
  };

  export type ProposalParamsStruct = {
    investmentInfo: IFlexFunding.InvestmentInfoStruct;
    vestInfo: IFlexFunding.VestInfoStruct;
    fundRaiseInfo: IFlexFunding.FundRaiseInfoStruct;
    proposerRewardInfo: IFlexFunding.ProposerRewardInfoStruct;
    priorityDepositWhitelist: PromiseOrValue<string>[];
  };

  export type ProposalParamsStructOutput = [
    IFlexFunding.InvestmentInfoStructOutput,
    IFlexFunding.VestInfoStructOutput,
    IFlexFunding.FundRaiseInfoStructOutput,
    IFlexFunding.ProposerRewardInfoStructOutput,
    string[]
  ] & {
    investmentInfo: IFlexFunding.InvestmentInfoStructOutput;
    vestInfo: IFlexFunding.VestInfoStructOutput;
    fundRaiseInfo: IFlexFunding.FundRaiseInfoStructOutput;
    proposerRewardInfo: IFlexFunding.ProposerRewardInfoStructOutput;
    priorityDepositWhitelist: string[];
  };
}

export interface FlexFundingAdapterContractInterface extends utils.Interface {
  functions: {
    "Proposals(address,bytes32)": FunctionFragment;
    "RETRUN_TOKEN_AMOUNT_PRECISION()": FunctionFragment;
    "allDone(address)": FunctionFragment;
    "clearProposerWhitelist(address)": FunctionFragment;
    "getProposerWhitelist(address)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isPriorityDepositer(address,bytes32,address)": FunctionFragment;
    "isProposerWhiteList(address,address)": FunctionFragment;
    "processProposal(address,bytes32)": FunctionFragment;
    "protocolAddress()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "registerProposerWhiteList(address,address)": FunctionFragment;
    "retrunTokenToApprover(address,bytes32)": FunctionFragment;
    "setProtocolAddress(address,address)": FunctionFragment;
    "setProtocolFee(address,uint256)": FunctionFragment;
    "submitProposal(address,((address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,address,address),(uint256,uint256,uint256,uint256,uint256,bool,address,string,string),(uint8,uint256,uint256,uint256,uint256,bool,(uint8,uint32,address,uint256,uint256),(bool,uint8,address,uint256,uint256)),(uint256,uint256),address[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Proposals"
      | "RETRUN_TOKEN_AMOUNT_PRECISION"
      | "allDone"
      | "clearProposerWhitelist"
      | "getProposerWhitelist"
      | "isActiveMember"
      | "isPriorityDepositer"
      | "isProposerWhiteList"
      | "processProposal"
      | "protocolAddress"
      | "protocolFee"
      | "registerProposerWhiteList"
      | "retrunTokenToApprover"
      | "setProtocolAddress"
      | "setProtocolFee"
      | "submitProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Proposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "RETRUN_TOKEN_AMOUNT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearProposerWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriorityDepositer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposerWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerProposerWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrunTokenToApprover",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [PromiseOrValue<string>, IFlexFunding.ProposalParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "Proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RETRUN_TOKEN_AMOUNT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allDone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearProposerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriorityDepositer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposerWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProposerWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrunTokenToApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32,address)": EventFragment;
    "ProposalExecuted(address,bytes32,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddress: string;
  proposalId: string;
  proposer: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  daoAddress: string;
  proposalId: string;
  state: number;
}
export type ProposalExecutedEvent = TypedEvent<
  [string, string, number],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface FlexFundingAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexFundingAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IFlexFunding.ProposalInvestmentInfoStructOutput,
        IFlexFunding.VestInfoStructOutput,
        IFlexFunding.FundRaiseInfoStructOutput,
        IFlexFunding.ProposerRewardInfoStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposer: string;
        investmentInfo: IFlexFunding.ProposalInvestmentInfoStructOutput;
        vestInfo: IFlexFunding.VestInfoStructOutput;
        fundRaiseInfo: IFlexFunding.FundRaiseInfoStructOutput;
        proposerRewardInfo: IFlexFunding.ProposerRewardInfoStructOutput;
        startVoteTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    RETRUN_TOKEN_AMOUNT_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPriorityDepositer(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolAddress(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrunTokenToApprover(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolAddress(
      dao: PromiseOrValue<string>,
      _protocolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IFlexFunding.ProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Proposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      IFlexFunding.ProposalInvestmentInfoStructOutput,
      IFlexFunding.VestInfoStructOutput,
      IFlexFunding.FundRaiseInfoStructOutput,
      IFlexFunding.ProposerRewardInfoStructOutput,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposer: string;
      investmentInfo: IFlexFunding.ProposalInvestmentInfoStructOutput;
      vestInfo: IFlexFunding.VestInfoStructOutput;
      fundRaiseInfo: IFlexFunding.FundRaiseInfoStructOutput;
      proposerRewardInfo: IFlexFunding.ProposerRewardInfoStructOutput;
      startVoteTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  RETRUN_TOKEN_AMOUNT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  allDone(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearProposerWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposerWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPriorityDepositer(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposerWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolAddress(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  registerProposerWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrunTokenToApprover(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolAddress(
    dao: PromiseOrValue<string>,
    _protocolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    dao: PromiseOrValue<string>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    dao: PromiseOrValue<string>,
    params: IFlexFunding.ProposalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IFlexFunding.ProposalInvestmentInfoStructOutput,
        IFlexFunding.VestInfoStructOutput,
        IFlexFunding.FundRaiseInfoStructOutput,
        IFlexFunding.ProposerRewardInfoStructOutput,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposer: string;
        investmentInfo: IFlexFunding.ProposalInvestmentInfoStructOutput;
        vestInfo: IFlexFunding.VestInfoStructOutput;
        fundRaiseInfo: IFlexFunding.FundRaiseInfoStructOutput;
        proposerRewardInfo: IFlexFunding.ProposerRewardInfoStructOutput;
        startVoteTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    RETRUN_TOKEN_AMOUNT_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPriorityDepositer(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolAddress(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    retrunTokenToApprover(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolAddress(
      dao: PromiseOrValue<string>,
      _protocolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IFlexFunding.ProposalParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProposalCreated(address,bytes32,address)"(
      daoAddress?: null,
      proposalId?: null,
      proposer?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddress?: null,
      proposalId?: null,
      proposer?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(address,bytes32,uint8)"(
      daoAddress?: null,
      proposalId?: null,
      state?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      daoAddress?: null,
      proposalId?: null,
      state?: null
    ): ProposalExecutedEventFilter;
  };

  estimateGas: {
    Proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RETRUN_TOKEN_AMOUNT_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPriorityDepositer(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrunTokenToApprover(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolAddress(
      dao: PromiseOrValue<string>,
      _protocolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IFlexFunding.ProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Proposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RETRUN_TOKEN_AMOUNT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allDone(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposerWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPriorityDepositer(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerProposerWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrunTokenToApprover(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolAddress(
      dao: PromiseOrValue<string>,
      _protocolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IFlexFunding.ProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
