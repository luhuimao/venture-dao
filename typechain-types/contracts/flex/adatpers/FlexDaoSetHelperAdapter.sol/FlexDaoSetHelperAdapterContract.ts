/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface FlexDaoSetHelperAdapterContractInterface
  extends utils.Interface {
  functions: {
    "setFees(address,uint256,uint256,address)": FunctionFragment;
    "setGovernorMembership(address,bool,uint256,address,uint256,uint8,address[])": FunctionFragment;
    "setInvestorMembership(address,bool,uint8,string,uint256,address,uint256,address[])": FunctionFragment;
    "setParticipantCap(address,bool,uint256)": FunctionFragment;
    "setPollForInvestment(address,uint256[9],address[2],address[])": FunctionFragment;
    "setProposerMembership(address,uint256,uint256,uint256,address,address[])": FunctionFragment;
    "setVoting(address,address,uint256[8],address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setFees"
      | "setGovernorMembership"
      | "setInvestorMembership"
      | "setParticipantCap"
      | "setPollForInvestment"
      | "setProposerMembership"
      | "setVoting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipantCap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPollForInvestment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      [PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposerMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipantCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPollForInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposerMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoting", data: BytesLike): Result;

  events: {};
}

export interface FlexDaoSetHelperAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexDaoSetHelperAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setFees(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      flexDaoReturnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      varifyType: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParticipantCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPollForInvestment(
      dao: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      addressArgs: [PromiseOrValue<string>, PromiseOrValue<string>],
      pollsterMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposerMembership(
      dao: PromiseOrValue<string>,
      flexDaoProposerMembershipMinHolding: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenId: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipVarifyType: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenAddress: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoting(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setFees(
    dao: PromiseOrValue<string>,
    flexDaoManagementfee: PromiseOrValue<BigNumberish>,
    flexDaoReturnTokenManagementFee: PromiseOrValue<BigNumberish>,
    managementFeeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernorMembership(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    varifyType: PromiseOrValue<BigNumberish>,
    whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInvestorMembership(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    varifyType: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParticipantCap(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPollForInvestment(
    dao: PromiseOrValue<string>,
    uint256Args: PromiseOrValue<BigNumberish>[],
    addressArgs: [PromiseOrValue<string>, PromiseOrValue<string>],
    pollsterMembershipWhitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposerMembership(
    dao: PromiseOrValue<string>,
    flexDaoProposerMembershipMinHolding: PromiseOrValue<BigNumberish>,
    flexDaoProposerMembershipTokenId: PromiseOrValue<BigNumberish>,
    flexDaoProposerMembershipVarifyType: PromiseOrValue<BigNumberish>,
    flexDaoProposerMembershipTokenAddress: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoting(
    dao: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    uint256Args: PromiseOrValue<BigNumberish>[],
    governors: PromiseOrValue<string>[],
    allocations: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setFees(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      flexDaoReturnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      varifyType: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipantCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPollForInvestment(
      dao: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      addressArgs: [PromiseOrValue<string>, PromiseOrValue<string>],
      pollsterMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setProposerMembership(
      dao: PromiseOrValue<string>,
      flexDaoProposerMembershipMinHolding: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenId: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipVarifyType: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenAddress: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVoting(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      allocations: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setFees(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      flexDaoReturnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      varifyType: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParticipantCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPollForInvestment(
      dao: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      addressArgs: [PromiseOrValue<string>, PromiseOrValue<string>],
      pollsterMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposerMembership(
      dao: PromiseOrValue<string>,
      flexDaoProposerMembershipMinHolding: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenId: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipVarifyType: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenAddress: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoting(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setFees(
      dao: PromiseOrValue<string>,
      flexDaoManagementfee: PromiseOrValue<BigNumberish>,
      flexDaoReturnTokenManagementFee: PromiseOrValue<BigNumberish>,
      managementFeeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      varifyType: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParticipantCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPollForInvestment(
      dao: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      addressArgs: [PromiseOrValue<string>, PromiseOrValue<string>],
      pollsterMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposerMembership(
      dao: PromiseOrValue<string>,
      flexDaoProposerMembershipMinHolding: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenId: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipVarifyType: PromiseOrValue<BigNumberish>,
      flexDaoProposerMembershipTokenAddress: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoting(
      dao: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      uint256Args: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      allocations: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
