/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface FlexPollingVotingContractInterface extends utils.Interface {
  functions: {
    "ADAPTER_NAME()": FunctionFragment;
    "checkIfVoted(address,bytes32,address)": FunctionFragment;
    "clearPollsterWhiteList(address)": FunctionFragment;
    "getAdapterName()": FunctionFragment;
    "getSenderAddress(address,address,bytes,address)": FunctionFragment;
    "getVotingWeight(address,address)": FunctionFragment;
    "getWhitelist(address)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "isPollsterWhiteList(address,address)": FunctionFragment;
    "registerPollsterWhiteList(address,address)": FunctionFragment;
    "startNewVotingForProposal(address,bytes32,bytes)": FunctionFragment;
    "submitVote(address,bytes32,uint256)": FunctionFragment;
    "voteResult(address,bytes32)": FunctionFragment;
    "votes(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADAPTER_NAME"
      | "checkIfVoted"
      | "clearPollsterWhiteList"
      | "getAdapterName"
      | "getSenderAddress"
      | "getVotingWeight"
      | "getWhitelist"
      | "isActiveMember"
      | "isPollsterWhiteList"
      | "registerPollsterWhiteList"
      | "startNewVotingForProposal"
      | "submitVote"
      | "voteResult"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADAPTER_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfVoted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clearPollsterWhiteList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapterName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingWeight",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPollsterWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPollsterWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewVotingForProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteResult",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADAPTER_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearPollsterWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapterName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPollsterWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPollsterWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewVotingForProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "SubmitVote(address,bytes32,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
}

export interface SubmitVoteEventObject {
  daoAddr: string;
  proposalId: string;
  votingTime: BigNumber;
  voteStartTime: BigNumber;
  voteStopTime: BigNumber;
  voter: string;
  voteValue: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
  currentQuorum: BigNumber;
  currentSupportf: BigNumber;
}
export type SubmitVoteEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  SubmitVoteEventObject
>;

export type SubmitVoteEventFilter = TypedEventFilter<SubmitVoteEvent>;

export interface FlexPollingVotingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexPollingVotingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADAPTER_NAME(overrides?: CallOverrides): Promise<[string]>;

    checkIfVoted(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearPollsterWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdapterName(overrides?: CallOverrides): Promise<[string]>;

    getSenderAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVotingWeight(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWhitelist(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startNewVotingForProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voteValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteResult(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        state: number;
        nbYes: BigNumber;
        nbNo: BigNumber;
      }
    >;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nbYes: BigNumber;
        nbNo: BigNumber;
        startingTime: BigNumber;
        stopTime: BigNumber;
      }
    >;
  };

  ADAPTER_NAME(overrides?: CallOverrides): Promise<string>;

  checkIfVoted(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    voterAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearPollsterWhiteList(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdapterName(overrides?: CallOverrides): Promise<string>;

  getSenderAddress(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVotingWeight(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWhitelist(
    daoAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPollsterWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerPollsterWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startNewVotingForProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    voteValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteResult(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      state: number;
      nbYes: BigNumber;
      nbNo: BigNumber;
    }
  >;

  votes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      nbYes: BigNumber;
      nbNo: BigNumber;
      startingTime: BigNumber;
      stopTime: BigNumber;
    }
  >;

  callStatic: {
    ADAPTER_NAME(overrides?: CallOverrides): Promise<string>;

    checkIfVoted(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearPollsterWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdapterName(overrides?: CallOverrides): Promise<string>;

    getSenderAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVotingWeight(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewVotingForProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voteValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteResult(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        state: number;
        nbYes: BigNumber;
        nbNo: BigNumber;
      }
    >;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nbYes: BigNumber;
        nbNo: BigNumber;
        startingTime: BigNumber;
        stopTime: BigNumber;
      }
    >;
  };

  filters: {
    "SubmitVote(address,bytes32,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      daoAddr?: null,
      proposalId?: null,
      votingTime?: null,
      voteStartTime?: null,
      voteStopTime?: null,
      voter?: null,
      voteValue?: null,
      nbYes?: null,
      nbNo?: null,
      currentQuorum?: null,
      currentSupportf?: null
    ): SubmitVoteEventFilter;
    SubmitVote(
      daoAddr?: null,
      proposalId?: null,
      votingTime?: null,
      voteStartTime?: null,
      voteStopTime?: null,
      voter?: null,
      voteValue?: null,
      nbYes?: null,
      nbNo?: null,
      currentQuorum?: null,
      currentSupportf?: null
    ): SubmitVoteEventFilter;
  };

  estimateGas: {
    ADAPTER_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    checkIfVoted(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearPollsterWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdapterName(overrides?: CallOverrides): Promise<BigNumber>;

    getSenderAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingWeight(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startNewVotingForProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitVote(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voteValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteResult(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADAPTER_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkIfVoted(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearPollsterWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdapterName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSenderAddress(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingWeight(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelist(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPollsterWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startNewVotingForProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      voteValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteResult(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
