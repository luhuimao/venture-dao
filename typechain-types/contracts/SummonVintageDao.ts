/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SummonVintageDao {
  export type VintageCallStruct = {
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type VintageCallStructOutput = [string, string] & {
    target: string;
    callData: string;
  };

  export type VintageInvestorCapInfoStruct = {
    enable: PromiseOrValue<boolean>;
    cap: PromiseOrValue<BigNumberish>;
  };

  export type VintageInvestorCapInfoStructOutput = [boolean, BigNumber] & {
    enable: boolean;
    cap: BigNumber;
  };

  export type VintageBackerMembershipStruct = {
    enable: PromiseOrValue<boolean>;
    varifyType: PromiseOrValue<BigNumberish>;
    minAmount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type VintageBackerMembershipStructOutput = [
    boolean,
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    enable: boolean;
    varifyType: number;
    minAmount: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type VintageGovernorMembershipStruct = {
    enable: PromiseOrValue<boolean>;
    varifyType: PromiseOrValue<BigNumberish>;
    minAmount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    whiteList: PromiseOrValue<string>[];
  };

  export type VintageGovernorMembershipStructOutput = [
    boolean,
    number,
    BigNumber,
    string,
    BigNumber,
    string[]
  ] & {
    enable: boolean;
    varifyType: number;
    minAmount: BigNumber;
    tokenAddress: string;
    tokenId: BigNumber;
    whiteList: string[];
  };

  export type VintageVotingInfoStruct = {
    votingAssetType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
  };

  export type VintageVotingInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingAssetType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
  };

  export type VintageDaoParamsStruct = {
    daoName: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    daoFactoriesAddress: PromiseOrValue<string>[];
    enalbeAdapters: DaoFactory.AdapterStruct[];
    adapters1: DaoFactory.AdapterStruct[];
    investorCap: SummonVintageDao.VintageInvestorCapInfoStruct;
    backerMembership: SummonVintageDao.VintageBackerMembershipStruct;
    governorMembership: SummonVintageDao.VintageGovernorMembershipStruct;
    votingInfo: SummonVintageDao.VintageVotingInfoStruct;
    genesisGovernors: PromiseOrValue<string>[];
    allocations: PromiseOrValue<BigNumberish>[];
  };

  export type VintageDaoParamsStructOutput = [
    string,
    string,
    string[],
    DaoFactory.AdapterStructOutput[],
    DaoFactory.AdapterStructOutput[],
    SummonVintageDao.VintageInvestorCapInfoStructOutput,
    SummonVintageDao.VintageBackerMembershipStructOutput,
    SummonVintageDao.VintageGovernorMembershipStructOutput,
    SummonVintageDao.VintageVotingInfoStructOutput,
    string[],
    BigNumber[]
  ] & {
    daoName: string;
    creator: string;
    daoFactoriesAddress: string[];
    enalbeAdapters: DaoFactory.AdapterStructOutput[];
    adapters1: DaoFactory.AdapterStructOutput[];
    investorCap: SummonVintageDao.VintageInvestorCapInfoStructOutput;
    backerMembership: SummonVintageDao.VintageBackerMembershipStructOutput;
    governorMembership: SummonVintageDao.VintageGovernorMembershipStructOutput;
    votingInfo: SummonVintageDao.VintageVotingInfoStructOutput;
    genesisGovernors: string[];
    allocations: BigNumber[];
  };
}

export declare namespace DaoFactory {
  export type AdapterStruct = {
    id: PromiseOrValue<BytesLike>;
    addr: PromiseOrValue<string>;
    flags: PromiseOrValue<BigNumberish>;
  };

  export type AdapterStructOutput = [string, string, BigNumber] & {
    id: string;
    addr: string;
    flags: BigNumber;
  };
}

export interface SummonVintageDaoInterface extends utils.Interface {
  functions: {
    "multiVintageCall((address,bytes)[8])": FunctionFragment;
    "summonVintageDao((string,address,address[],(bytes32,address,uint128)[],(bytes32,address,uint128)[],(bool,uint256),(bool,uint8,uint256,address,uint256,address[]),(bool,uint8,uint256,address,uint256,address[]),(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address[],uint256[]))": FunctionFragment;
    "summonVintageDao1(address,string,address)": FunctionFragment;
    "summonVintageDao2(address,address,address)": FunctionFragment;
    "summonVintageDao3(address,(bytes32,address,uint128)[],address)": FunctionFragment;
    "summonVintageDao4(address,address,(bytes32,address,uint128)[],address)": FunctionFragment;
    "summonVintageDao5(bool,uint256[3],address,address[],address)": FunctionFragment;
    "summonVintageDao6(address,address,uint256[9])": FunctionFragment;
    "summonVintageDao7(address,uint256,address[],uint256[])": FunctionFragment;
    "summonVintageDao8(bool,address,uint8,uint256,uint256,address,address[])": FunctionFragment;
    "summonVintageDao9(address,bool,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "multiVintageCall"
      | "summonVintageDao"
      | "summonVintageDao1"
      | "summonVintageDao2"
      | "summonVintageDao3"
      | "summonVintageDao4"
      | "summonVintageDao5"
      | "summonVintageDao6"
      | "summonVintageDao7"
      | "summonVintageDao8"
      | "summonVintageDao9"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "multiVintageCall",
    values: [SummonVintageDao.VintageCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao",
    values: [SummonVintageDao.VintageDaoParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao1",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao3",
    values: [
      PromiseOrValue<string>,
      DaoFactory.AdapterStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao4",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      DaoFactory.AdapterStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao5",
    values: [
      PromiseOrValue<boolean>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao6",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao7",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao8",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonVintageDao9",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "multiVintageCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao7",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonVintageDao9",
    data: BytesLike
  ): Result;

  events: {
    "VintageDaoCreated(address,address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VintageDaoCreated"): EventFragment;
}

export interface VintageDaoCreatedEventObject {
  daoFactoryAddress: string;
  daoAddr: string;
  name: string;
  creator: string;
}
export type VintageDaoCreatedEvent = TypedEvent<
  [string, string, string, string],
  VintageDaoCreatedEventObject
>;

export type VintageDaoCreatedEventFilter =
  TypedEventFilter<VintageDaoCreatedEvent>;

export interface SummonVintageDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SummonVintageDaoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    multiVintageCall(
      calls: SummonVintageDao.VintageCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao(
      params: SummonVintageDao.VintageDaoParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao1(
      daoFacAddr: PromiseOrValue<string>,
      daoName: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao2(
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      newDaoAddr: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao3(
      daoFacAddr: PromiseOrValue<string>,
      enalbeAdapters: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao4(
      daoFacAddr: PromiseOrValue<string>,
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      adapters1: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao5(
      vintageDaoStewardMembershipEnable: PromiseOrValue<boolean>,
      uint256Params: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      vintageDaoStewardMembershipTokenAddress: PromiseOrValue<string>,
      vintageDaoGovernorMembershipWhitelist: PromiseOrValue<string>[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao6(
      newDaoAddr: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      votingInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao7(
      newDaoAddr: PromiseOrValue<string>,
      votingAssetType: PromiseOrValue<BigNumberish>,
      genesisGovernors: PromiseOrValue<string>[],
      allcationValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao8(
      enable: PromiseOrValue<boolean>,
      newDaoAddr: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      vintageDaoInvestorMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonVintageDao9(
      newDaoAddr: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  multiVintageCall(
    calls: SummonVintageDao.VintageCallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao(
    params: SummonVintageDao.VintageDaoParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao1(
    daoFacAddr: PromiseOrValue<string>,
    daoName: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao2(
    vintageFundingPoolFacAddr: PromiseOrValue<string>,
    newDaoAddr: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao3(
    daoFacAddr: PromiseOrValue<string>,
    enalbeAdapters: DaoFactory.AdapterStruct[],
    newDaoAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao4(
    daoFacAddr: PromiseOrValue<string>,
    vintageFundingPoolFacAddr: PromiseOrValue<string>,
    adapters1: DaoFactory.AdapterStruct[],
    newDaoAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao5(
    vintageDaoStewardMembershipEnable: PromiseOrValue<boolean>,
    uint256Params: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    vintageDaoStewardMembershipTokenAddress: PromiseOrValue<string>,
    vintageDaoGovernorMembershipWhitelist: PromiseOrValue<string>[],
    newDaoAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao6(
    newDaoAddr: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    votingInfo: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao7(
    newDaoAddr: PromiseOrValue<string>,
    votingAssetType: PromiseOrValue<BigNumberish>,
    genesisGovernors: PromiseOrValue<string>[],
    allcationValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao8(
    enable: PromiseOrValue<boolean>,
    newDaoAddr: PromiseOrValue<string>,
    varifyType: PromiseOrValue<BigNumberish>,
    minHolding: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    vintageDaoInvestorMembershipWhitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonVintageDao9(
    newDaoAddr: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    multiVintageCall(
      calls: SummonVintageDao.VintageCallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    summonVintageDao(
      params: SummonVintageDao.VintageDaoParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    summonVintageDao1(
      daoFacAddr: PromiseOrValue<string>,
      daoName: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao2(
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      newDaoAddr: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao3(
      daoFacAddr: PromiseOrValue<string>,
      enalbeAdapters: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao4(
      daoFacAddr: PromiseOrValue<string>,
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      adapters1: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao5(
      vintageDaoStewardMembershipEnable: PromiseOrValue<boolean>,
      uint256Params: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      vintageDaoStewardMembershipTokenAddress: PromiseOrValue<string>,
      vintageDaoGovernorMembershipWhitelist: PromiseOrValue<string>[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao6(
      newDaoAddr: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      votingInfo: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao7(
      newDaoAddr: PromiseOrValue<string>,
      votingAssetType: PromiseOrValue<BigNumberish>,
      genesisGovernors: PromiseOrValue<string>[],
      allcationValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao8(
      enable: PromiseOrValue<boolean>,
      newDaoAddr: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      vintageDaoInvestorMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    summonVintageDao9(
      newDaoAddr: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "VintageDaoCreated(address,address,string,address)"(
      daoFactoryAddress?: null,
      daoAddr?: null,
      name?: null,
      creator?: null
    ): VintageDaoCreatedEventFilter;
    VintageDaoCreated(
      daoFactoryAddress?: null,
      daoAddr?: null,
      name?: null,
      creator?: null
    ): VintageDaoCreatedEventFilter;
  };

  estimateGas: {
    multiVintageCall(
      calls: SummonVintageDao.VintageCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao(
      params: SummonVintageDao.VintageDaoParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao1(
      daoFacAddr: PromiseOrValue<string>,
      daoName: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao2(
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      newDaoAddr: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao3(
      daoFacAddr: PromiseOrValue<string>,
      enalbeAdapters: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao4(
      daoFacAddr: PromiseOrValue<string>,
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      adapters1: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao5(
      vintageDaoStewardMembershipEnable: PromiseOrValue<boolean>,
      uint256Params: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      vintageDaoStewardMembershipTokenAddress: PromiseOrValue<string>,
      vintageDaoGovernorMembershipWhitelist: PromiseOrValue<string>[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao6(
      newDaoAddr: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      votingInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao7(
      newDaoAddr: PromiseOrValue<string>,
      votingAssetType: PromiseOrValue<BigNumberish>,
      genesisGovernors: PromiseOrValue<string>[],
      allcationValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao8(
      enable: PromiseOrValue<boolean>,
      newDaoAddr: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      vintageDaoInvestorMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonVintageDao9(
      newDaoAddr: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    multiVintageCall(
      calls: SummonVintageDao.VintageCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao(
      params: SummonVintageDao.VintageDaoParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao1(
      daoFacAddr: PromiseOrValue<string>,
      daoName: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao2(
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      newDaoAddr: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao3(
      daoFacAddr: PromiseOrValue<string>,
      enalbeAdapters: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao4(
      daoFacAddr: PromiseOrValue<string>,
      vintageFundingPoolFacAddr: PromiseOrValue<string>,
      adapters1: DaoFactory.AdapterStruct[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao5(
      vintageDaoStewardMembershipEnable: PromiseOrValue<boolean>,
      uint256Params: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      vintageDaoStewardMembershipTokenAddress: PromiseOrValue<string>,
      vintageDaoGovernorMembershipWhitelist: PromiseOrValue<string>[],
      newDaoAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao6(
      newDaoAddr: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      votingInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao7(
      newDaoAddr: PromiseOrValue<string>,
      votingAssetType: PromiseOrValue<BigNumberish>,
      genesisGovernors: PromiseOrValue<string>[],
      allcationValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao8(
      enable: PromiseOrValue<boolean>,
      newDaoAddr: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minHolding: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      vintageDaoInvestorMembershipWhitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonVintageDao9(
      newDaoAddr: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
