/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SignaturesInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN()": FunctionFragment;
    "EIP712_DOMAIN_TYPEHASH()": FunctionFragment;
    "domainSeparator(address,address)": FunctionFragment;
    "hashMessage(address,address,bytes32)": FunctionFragment;
    "isValidSignature(address,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN"
      | "EIP712_DOMAIN_TYPEHASH"
      | "domainSeparator"
      | "hashMessage"
      | "isValidSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Signatures extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignaturesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashMessage(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidSignature(
      signer: PromiseOrValue<string>,
      hash: PromiseOrValue<BytesLike>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  domainSeparator(
    dao: PromiseOrValue<string>,
    actionId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashMessage(
    dao: PromiseOrValue<string>,
    actionId: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidSignature(
    signer: PromiseOrValue<string>,
    hash: PromiseOrValue<BytesLike>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    domainSeparator(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashMessage(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidSignature(
      signer: PromiseOrValue<string>,
      hash: PromiseOrValue<BytesLike>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    EIP712_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessage(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      signer: PromiseOrValue<string>,
      hash: PromiseOrValue<BytesLike>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessage(
      dao: PromiseOrValue<string>,
      actionId: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      signer: PromiseOrValue<string>,
      hash: PromiseOrValue<BytesLike>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
