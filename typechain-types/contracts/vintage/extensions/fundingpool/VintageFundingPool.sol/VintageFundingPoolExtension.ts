/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface VintageFundingPoolExtensionInterface extends utils.Interface {
  functions: {
    "addToBalance(address,uint256)": FunctionFragment;
    "availableTokens(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkpoints(address,address,uint32)": FunctionFragment;
    "dao()": FunctionFragment;
    "distributeFunds(address,address,uint256)": FunctionFragment;
    "feeCheckpoints(address,address,uint32)": FunctionFragment;
    "fundRaises(address)": FunctionFragment;
    "fundRaisingTokenAddress()": FunctionFragment;
    "getFundRaisingTokenAddress()": FunctionFragment;
    "getInvestors()": FunctionFragment;
    "getPriorAmount(address,address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "investorAmount()": FunctionFragment;
    "isInvestor(address)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "isValidInvestor(address)": FunctionFragment;
    "lastLPChargedManagentFeeTime(address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lpChargedManagementFees(address)": FunctionFragment;
    "maxExternalTokens()": FunctionFragment;
    "numCheckpoints(address,address)": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "projectSnapFunds()": FunctionFragment;
    "projectSnapRice()": FunctionFragment;
    "recoverERC20(address,uint256,address)": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "riceTokenAddress()": FunctionFragment;
    "serviceFeeRatio()": FunctionFragment;
    "setMaxExternalTokens(uint8)": FunctionFragment;
    "setRiceTokenAddress(address)": FunctionFragment;
    "setServiceFeeRatio(uint256)": FunctionFragment;
    "setVotingWeightRadix(uint128)": FunctionFragment;
    "snapFunds()": FunctionFragment;
    "subtractAllFromBalance(address,uint256)": FunctionFragment;
    "subtractFromBalance(address,address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updateTotalGPsBalance(address,uint256,uint8)": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
    "votingWeightAddend()": FunctionFragment;
    "votingWeightMultiplier()": FunctionFragment;
    "votingWeightRadix()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToBalance"
      | "availableTokens"
      | "balanceOf"
      | "checkpoints"
      | "dao"
      | "distributeFunds"
      | "feeCheckpoints"
      | "fundRaises"
      | "fundRaisingTokenAddress"
      | "getFundRaisingTokenAddress"
      | "getInvestors"
      | "getPriorAmount"
      | "initialize"
      | "initialized"
      | "investorAmount"
      | "isInvestor"
      | "isTokenAllowed"
      | "isValidInvestor"
      | "lastLPChargedManagentFeeTime"
      | "lastUpdateTime"
      | "lpChargedManagementFees"
      | "maxExternalTokens"
      | "numCheckpoints"
      | "periodFinish"
      | "projectSnapFunds"
      | "projectSnapRice"
      | "recoverERC20"
      | "rewardPerTokenStored"
      | "rewardRate"
      | "rewards"
      | "rewardsDuration"
      | "riceTokenAddress"
      | "serviceFeeRatio"
      | "setMaxExternalTokens"
      | "setRiceTokenAddress"
      | "setServiceFeeRatio"
      | "setVotingWeightRadix"
      | "snapFunds"
      | "subtractAllFromBalance"
      | "subtractFromBalance"
      | "supportsInterface"
      | "tokens"
      | "totalSupply"
      | "updateTotalGPsBalance"
      | "userRewardPerTokenPaid"
      | "votingWeightAddend"
      | "votingWeightMultiplier"
      | "votingWeightRadix"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCheckpoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundRaises",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundRaisingTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundRaisingTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidInvestor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLPChargedManagentFeeTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpChargedManagementFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxExternalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectSnapFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectSnapRice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riceTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxExternalTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiceTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeeRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingWeightRadix",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "snapFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subtractAllFromBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subtractFromBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalGPsBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingWeightAddend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingWeightMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingWeightRadix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundRaises", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundRaisingTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundRaisingTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInvestor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLPChargedManagentFeeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpChargedManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxExternalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectSnapFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectSnapRice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxExternalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingWeightRadix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subtractAllFromBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtractFromBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalGPsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingWeightAddend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingWeightMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingWeightRadix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DistributeFund(address,address,uint256)": EventFragment;
    "ManagementFeeCharged(uint256,address,uint256)": EventFragment;
    "NewBalance(address,address,uint128)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RedeptionFeeCharged(uint256,address,uint256)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Withdraw(address,address,uint128)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributeFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementFeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeptionFeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface DistributeFundEventObject {
  distributeTo: string;
  tokenAddr: string;
  amount: BigNumber;
}
export type DistributeFundEvent = TypedEvent<
  [string, string, BigNumber],
  DistributeFundEventObject
>;

export type DistributeFundEventFilter = TypedEventFilter<DistributeFundEvent>;

export interface ManagementFeeChargedEventObject {
  chargedTime: BigNumber;
  lpAddress: string;
  amount: BigNumber;
}
export type ManagementFeeChargedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ManagementFeeChargedEventObject
>;

export type ManagementFeeChargedEventFilter =
  TypedEventFilter<ManagementFeeChargedEvent>;

export interface NewBalanceEventObject {
  member: string;
  tokenAddr: string;
  amount: BigNumber;
}
export type NewBalanceEvent = TypedEvent<
  [string, string, BigNumber],
  NewBalanceEventObject
>;

export type NewBalanceEventFilter = TypedEventFilter<NewBalanceEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  RecoveredEventObject
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RedeptionFeeChargedEventObject {
  chargedTime: BigNumber;
  lpAddress: string;
  amount: BigNumber;
}
export type RedeptionFeeChargedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedeptionFeeChargedEventObject
>;

export type RedeptionFeeChargedEventFilter =
  TypedEventFilter<RedeptionFeeChargedEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardsDurationUpdatedEventObject {
  newDuration: BigNumber;
}
export type RewardsDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  RewardsDurationUpdatedEventObject
>;

export type RewardsDurationUpdatedEventFilter =
  TypedEventFilter<RewardsDurationUpdatedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface WithdrawEventObject {
  account: string;
  tokenAddr: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface VintageFundingPoolExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VintageFundingPoolExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToBalance(
      depositer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
    >;

    dao(overrides?: CallOverrides): Promise<[string]>;

    distributeFunds(
      recipientAddr: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
    >;

    fundRaises(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { state: number }>;

    fundRaisingTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getFundRaisingTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getInvestors(overrides?: CallOverrides): Promise<[string[]]>;

    getPriorAmount(
      account: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _dao: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    investorAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isInvestor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidInvestor(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastLPChargedManagentFeeTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpChargedManagementFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxExternalTokens(overrides?: CallOverrides): Promise<[number]>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    projectSnapFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    projectSnapRice(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    riceTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    serviceFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxExternalTokens(
      maxTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiceTokenAddress(
      riceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setServiceFeeRatio(
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingWeightRadix(
      weightRadix: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    snapFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    subtractAllFromBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subtractFromBalance(
      member: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTotalGPsBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      updateType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingWeightAddend(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingWeightMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingWeightRadix(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      recipientAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToBalance(
    depositer: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    investorAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoints(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
  >;

  dao(overrides?: CallOverrides): Promise<string>;

  distributeFunds(
    recipientAddr: PromiseOrValue<string>,
    tokenAddr: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCheckpoints(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
  >;

  fundRaises(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  fundRaisingTokenAddress(overrides?: CallOverrides): Promise<string>;

  getFundRaisingTokenAddress(overrides?: CallOverrides): Promise<string>;

  getInvestors(overrides?: CallOverrides): Promise<string[]>;

  getPriorAmount(
    account: PromiseOrValue<string>,
    tokenAddr: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _dao: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  investorAmount(overrides?: CallOverrides): Promise<BigNumber>;

  isInvestor(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAllowed(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidInvestor(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastLPChargedManagentFeeTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  lpChargedManagementFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxExternalTokens(overrides?: CallOverrides): Promise<number>;

  numCheckpoints(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  projectSnapFunds(overrides?: CallOverrides): Promise<BigNumber>;

  projectSnapRice(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  riceTokenAddress(overrides?: CallOverrides): Promise<string>;

  serviceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxExternalTokens(
    maxTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiceTokenAddress(
    riceAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setServiceFeeRatio(
    serviceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingWeightRadix(
    weightRadix: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  snapFunds(overrides?: CallOverrides): Promise<BigNumber>;

  subtractAllFromBalance(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subtractFromBalance(
    member: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  updateTotalGPsBalance(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    updateType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingWeightAddend(overrides?: CallOverrides): Promise<BigNumber>;

  votingWeightMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  votingWeightRadix(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    recipientAddr: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToBalance(
      depositer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
    >;

    dao(overrides?: CallOverrides): Promise<string>;

    distributeFunds(
      recipientAddr: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fromBlock: BigNumber; amount: BigNumber }
    >;

    fundRaises(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    fundRaisingTokenAddress(overrides?: CallOverrides): Promise<string>;

    getFundRaisingTokenAddress(overrides?: CallOverrides): Promise<string>;

    getInvestors(overrides?: CallOverrides): Promise<string[]>;

    getPriorAmount(
      account: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _dao: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    investorAmount(overrides?: CallOverrides): Promise<BigNumber>;

    isInvestor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidInvestor(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastLPChargedManagentFeeTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpChargedManagementFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxExternalTokens(overrides?: CallOverrides): Promise<number>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    projectSnapFunds(overrides?: CallOverrides): Promise<BigNumber>;

    projectSnapRice(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    riceTokenAddress(overrides?: CallOverrides): Promise<string>;

    serviceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxExternalTokens(
      maxTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiceTokenAddress(
      riceAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeeRatio(
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingWeightRadix(
      weightRadix: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    snapFunds(overrides?: CallOverrides): Promise<BigNumber>;

    subtractAllFromBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subtractFromBalance(
      member: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateTotalGPsBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      updateType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingWeightAddend(overrides?: CallOverrides): Promise<BigNumber>;

    votingWeightMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    votingWeightRadix(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      recipientAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DistributeFund(address,address,uint256)"(
      distributeTo?: null,
      tokenAddr?: null,
      amount?: null
    ): DistributeFundEventFilter;
    DistributeFund(
      distributeTo?: null,
      tokenAddr?: null,
      amount?: null
    ): DistributeFundEventFilter;

    "ManagementFeeCharged(uint256,address,uint256)"(
      chargedTime?: null,
      lpAddress?: null,
      amount?: null
    ): ManagementFeeChargedEventFilter;
    ManagementFeeCharged(
      chargedTime?: null,
      lpAddress?: null,
      amount?: null
    ): ManagementFeeChargedEventFilter;

    "NewBalance(address,address,uint128)"(
      member?: null,
      tokenAddr?: null,
      amount?: null
    ): NewBalanceEventFilter;
    NewBalance(
      member?: null,
      tokenAddr?: null,
      amount?: null
    ): NewBalanceEventFilter;

    "Recovered(address,uint256)"(
      token?: null,
      amount?: null
    ): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    "RedeptionFeeCharged(uint256,address,uint256)"(
      chargedTime?: null,
      lpAddress?: null,
      amount?: null
    ): RedeptionFeeChargedEventFilter;
    RedeptionFeeCharged(
      chargedTime?: null,
      lpAddress?: null,
      amount?: null
    ): RedeptionFeeChargedEventFilter;

    "RewardAdded(uint256)"(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    "RewardsDurationUpdated(uint256)"(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;
    RewardsDurationUpdated(
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;

    "Staked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;

    "Withdraw(address,address,uint128)"(
      account?: null,
      tokenAddr?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: null,
      tokenAddr?: null,
      amount?: null
    ): WithdrawEventFilter;

    "Withdrawn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addToBalance(
      depositer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFunds(
      recipientAddr: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundRaises(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundRaisingTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFundRaisingTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestors(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorAmount(
      account: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _dao: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    investorAmount(overrides?: CallOverrides): Promise<BigNumber>;

    isInvestor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidInvestor(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastLPChargedManagentFeeTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpChargedManagementFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxExternalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    projectSnapFunds(overrides?: CallOverrides): Promise<BigNumber>;

    projectSnapRice(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    riceTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxExternalTokens(
      maxTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiceTokenAddress(
      riceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setServiceFeeRatio(
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingWeightRadix(
      weightRadix: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    snapFunds(overrides?: CallOverrides): Promise<BigNumber>;

    subtractAllFromBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subtractFromBalance(
      member: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateTotalGPsBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      updateType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingWeightAddend(overrides?: CallOverrides): Promise<BigNumber>;

    votingWeightMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    votingWeightRadix(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      recipientAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToBalance(
      depositer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeFunds(
      recipientAddr: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundRaises(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundRaisingTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundRaisingTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorAmount(
      account: PromiseOrValue<string>,
      tokenAddr: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _dao: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investorAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInvestor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidInvestor(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLPChargedManagentFeeTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpChargedManagementFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxExternalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectSnapFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectSnapRice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riceTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serviceFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxExternalTokens(
      maxTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiceTokenAddress(
      riceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeeRatio(
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingWeightRadix(
      weightRadix: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    snapFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subtractAllFromBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subtractFromBalance(
      member: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTotalGPsBalance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      updateType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingWeightAddend(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingWeightMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingWeightRadix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      recipientAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
