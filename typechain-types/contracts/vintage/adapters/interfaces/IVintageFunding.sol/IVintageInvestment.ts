/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace IVintageInvestment {
  export type InvestmentInfoStruct = {
    investmentAmount: PromiseOrValue<BigNumberish>;
    investmentToken: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type InvestmentInfoStructOutput = [BigNumber, string, string] & {
    investmentAmount: BigNumber;
    investmentToken: string;
    receiver: string;
  };

  export type PaybackTokenInfoStruct = {
    escrow: PromiseOrValue<boolean>;
    paybackToken: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    paybackTokenAmount: PromiseOrValue<BigNumberish>;
    approver: PromiseOrValue<string>;
    nftEnable: PromiseOrValue<boolean>;
    vestingNft: PromiseOrValue<string>;
  };

  export type PaybackTokenInfoStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    string,
    boolean,
    string
  ] & {
    escrow: boolean;
    paybackToken: string;
    price: BigNumber;
    paybackTokenAmount: BigNumber;
    approver: string;
    nftEnable: boolean;
    vestingNft: string;
  };

  export type VestInfoStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    vestingStartTime: PromiseOrValue<BigNumberish>;
    vetingEndTime: PromiseOrValue<BigNumberish>;
    vestingCliffEndTime: PromiseOrValue<BigNumberish>;
    vestingCliffLockAmount: PromiseOrValue<BigNumberish>;
    vestingInterval: PromiseOrValue<BigNumberish>;
  };

  export type VestInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    description: string;
    vestingStartTime: BigNumber;
    vetingEndTime: BigNumber;
    vestingCliffEndTime: BigNumber;
    vestingCliffLockAmount: BigNumber;
    vestingInterval: BigNumber;
  };

  export type InvestmentProposalParamsStruct = {
    investmentInfo: IVintageInvestment.InvestmentInfoStruct;
    paybackTokenInfo: IVintageInvestment.PaybackTokenInfoStruct;
    vestInfo: IVintageInvestment.VestInfoStruct;
  };

  export type InvestmentProposalParamsStructOutput = [
    IVintageInvestment.InvestmentInfoStructOutput,
    IVintageInvestment.PaybackTokenInfoStructOutput,
    IVintageInvestment.VestInfoStructOutput
  ] & {
    investmentInfo: IVintageInvestment.InvestmentInfoStructOutput;
    paybackTokenInfo: IVintageInvestment.PaybackTokenInfoStructOutput;
    vestInfo: IVintageInvestment.VestInfoStructOutput;
  };
}

export interface IVintageInvestmentInterface extends utils.Interface {
  functions: {
    "processProposal(address,bytes32)": FunctionFragment;
    "submitProposal(address,((uint256,address,address),(bool,address,uint256,uint256,address,bool,address),(string,string,uint256,uint256,uint256,uint256,uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "processProposal" | "submitProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "processProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      PromiseOrValue<string>,
      IVintageInvestment.InvestmentProposalParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32)": EventFragment;
    "ProposalExecuted(address,bytes32,uint128,uint128,uint128)": EventFragment;
    "StartVote(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartVote"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddr: string;
  proposalId: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  daoAddr: string;
  proposalID: string;
  allVotingWeight: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface StartVoteEventObject {
  daoAddr: string;
  proposalID: string;
}
export type StartVoteEvent = TypedEvent<[string, string], StartVoteEventObject>;

export type StartVoteEventFilter = TypedEventFilter<StartVoteEvent>;

export interface IVintageInvestment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVintageInvestmentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IVintageInvestment.InvestmentProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  processProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    dao: PromiseOrValue<string>,
    params: IVintageInvestment.InvestmentProposalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IVintageInvestment.InvestmentProposalParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProposalCreated(address,bytes32)"(
      daoAddr?: null,
      proposalId?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddr?: null,
      proposalId?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(address,bytes32,uint128,uint128,uint128)"(
      daoAddr?: null,
      proposalID?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      daoAddr?: null,
      proposalID?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalExecutedEventFilter;

    "StartVote(address,bytes32)"(
      daoAddr?: null,
      proposalID?: null
    ): StartVoteEventFilter;
    StartVote(daoAddr?: null, proposalID?: null): StartVoteEventFilter;
  };

  estimateGas: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IVintageInvestment.InvestmentProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      dao: PromiseOrValue<string>,
      params: IVintageInvestment.InvestmentProposalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
