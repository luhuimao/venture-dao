/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface VintageFundingPoolAdapterContractInterface
  extends utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "clearFund(address)": FunctionFragment;
    "clearInvestorWhitelist(address)": FunctionFragment;
    "configureDao(address,uint32,uint32)": FunctionFragment;
    "daoFundRaisingStates(address)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "freeINPriorityDeposits(address,bytes32)": FunctionFragment;
    "getFundInvestors(address,uint256)": FunctionFragment;
    "getInvestorMembershipWhiteList(address)": FunctionFragment;
    "ifInRedemptionPeriod(address,uint256)": FunctionFragment;
    "ifInvestorMembershipWhiteList(address,address)": FunctionFragment;
    "isActiveMember(address,address)": FunctionFragment;
    "poolBalance(address)": FunctionFragment;
    "processFundRaise(address)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "raiserBalance(address)": FunctionFragment;
    "registerInvestorWhiteList(address,address)": FunctionFragment;
    "resetFundRaiseState(address)": FunctionFragment;
    "setProtocolFee(address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "clearFund"
      | "clearInvestorWhitelist"
      | "configureDao"
      | "daoFundRaisingStates"
      | "deposit"
      | "freeINPriorityDeposits"
      | "getFundInvestors"
      | "getInvestorMembershipWhiteList"
      | "ifInRedemptionPeriod"
      | "ifInvestorMembershipWhiteList"
      | "isActiveMember"
      | "poolBalance"
      | "processFundRaise"
      | "protocolFee"
      | "raiserBalance"
      | "registerInvestorWhiteList"
      | "resetFundRaiseState"
      | "setProtocolFee"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearInvestorWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureDao",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoFundRaisingStates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freeINPriorityDeposits",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundInvestors",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorMembershipWhiteList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ifInRedemptionPeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ifInvestorMembershipWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveMember",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processFundRaise",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiserBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInvestorWhiteList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetFundRaiseState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clearFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearInvestorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoFundRaisingStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeINPriorityDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorMembershipWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ifInRedemptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ifInvestorMembershipWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFundRaise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInvestorWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetFundRaiseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ClearFund(address,uint256,address)": EventFragment;
    "Deposit(address,uint256,address)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "ProcessFundRaise(address,uint256,uint256,uint256)": EventFragment;
    "RedeptionFeeCharged(address,address,uint256,uint256)": EventFragment;
    "WithDraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessFundRaise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeptionFeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDraw"): EventFragment;
}

export interface ClearFundEventObject {
  dao: string;
  amount: BigNumber;
  executor: string;
}
export type ClearFundEvent = TypedEvent<
  [string, BigNumber, string],
  ClearFundEventObject
>;

export type ClearFundEventFilter = TypedEventFilter<ClearFundEvent>;

export interface DepositEventObject {
  daoAddress: string;
  amount: BigNumber;
  account: string;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface ProcessFundRaiseEventObject {
  dao: string;
  fundRound: BigNumber;
  fundRaiseState: BigNumber;
  fundRaisedAmount: BigNumber;
}
export type ProcessFundRaiseEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ProcessFundRaiseEventObject
>;

export type ProcessFundRaiseEventFilter =
  TypedEventFilter<ProcessFundRaiseEvent>;

export interface RedeptionFeeChargedEventObject {
  dao: string;
  account: string;
  redempAmount: BigNumber;
  redemptionFee: BigNumber;
}
export type RedeptionFeeChargedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RedeptionFeeChargedEventObject
>;

export type RedeptionFeeChargedEventFilter =
  TypedEventFilter<RedeptionFeeChargedEvent>;

export interface WithDrawEventObject {
  daoAddress: string;
  amount: BigNumber;
  account: string;
}
export type WithDrawEvent = TypedEvent<
  [string, BigNumber, string],
  WithDrawEventObject
>;

export type WithDrawEventFilter = TypedEventFilter<WithDrawEvent>;

export interface VintageFundingPoolAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VintageFundingPoolAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      dao: PromiseOrValue<string>,
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearFund(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureDao(
      dao: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      superMajority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoFundRaisingStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deposit(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundInvestors(
      dao: PromiseOrValue<string>,
      fundRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ifInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    processFundRaise(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    raiserBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerInvestorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetFundRaiseState(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      feeProtocol: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    dao: PromiseOrValue<string>,
    investorAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearFund(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearInvestorWhitelist(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureDao(
    dao: PromiseOrValue<string>,
    quorum: PromiseOrValue<BigNumberish>,
    superMajority: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoFundRaisingStates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  deposit(
    dao: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeINPriorityDeposits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundInvestors(
    dao: PromiseOrValue<string>,
    fundRound: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getInvestorMembershipWhiteList(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ifInRedemptionPeriod(
    dao: PromiseOrValue<string>,
    timeStamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ifInvestorMembershipWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActiveMember(
    dao: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolBalance(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processFundRaise(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  raiserBalance(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerInvestorWhiteList(
    dao: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetFundRaiseState(
    dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    dao: PromiseOrValue<string>,
    feeProtocol: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    dao: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      dao: PromiseOrValue<string>,
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearFund(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureDao(
      dao: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      superMajority: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoFundRaisingStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    deposit(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundInvestors(
      dao: PromiseOrValue<string>,
      fundRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ifInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processFundRaise(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    raiserBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerInvestorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetFundRaiseState(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      feeProtocol: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClearFund(address,uint256,address)"(
      dao?: null,
      amount?: null,
      executor?: null
    ): ClearFundEventFilter;
    ClearFund(dao?: null, amount?: null, executor?: null): ClearFundEventFilter;

    "Deposit(address,uint256,address)"(
      daoAddress?: null,
      amount?: null,
      account?: null
    ): DepositEventFilter;
    Deposit(
      daoAddress?: null,
      amount?: null,
      account?: null
    ): DepositEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "ProcessFundRaise(address,uint256,uint256,uint256)"(
      dao?: null,
      fundRound?: null,
      fundRaiseState?: null,
      fundRaisedAmount?: null
    ): ProcessFundRaiseEventFilter;
    ProcessFundRaise(
      dao?: null,
      fundRound?: null,
      fundRaiseState?: null,
      fundRaisedAmount?: null
    ): ProcessFundRaiseEventFilter;

    "RedeptionFeeCharged(address,address,uint256,uint256)"(
      dao?: null,
      account?: null,
      redempAmount?: null,
      redemptionFee?: null
    ): RedeptionFeeChargedEventFilter;
    RedeptionFeeCharged(
      dao?: null,
      account?: null,
      redempAmount?: null,
      redemptionFee?: null
    ): RedeptionFeeChargedEventFilter;

    "WithDraw(address,uint256,address)"(
      daoAddress?: null,
      amount?: null,
      account?: null
    ): WithDrawEventFilter;
    WithDraw(
      daoAddress?: null,
      amount?: null,
      account?: null
    ): WithDrawEventFilter;
  };

  estimateGas: {
    balanceOf(
      dao: PromiseOrValue<string>,
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearFund(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureDao(
      dao: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      superMajority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoFundRaisingStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundInvestors(
      dao: PromiseOrValue<string>,
      fundRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ifInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processFundRaise(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    raiserBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerInvestorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetFundRaiseState(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      feeProtocol: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      dao: PromiseOrValue<string>,
      investorAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearFund(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearInvestorWhitelist(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureDao(
      dao: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      superMajority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoFundRaisingStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeINPriorityDeposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundInvestors(
      dao: PromiseOrValue<string>,
      fundRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ifInRedemptionPeriod(
      dao: PromiseOrValue<string>,
      timeStamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ifInvestorMembershipWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveMember(
      dao: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processFundRaise(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiserBalance(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerInvestorWhiteList(
      dao: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetFundRaiseState(
      dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      dao: PromiseOrValue<string>,
      feeProtocol: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      dao: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
