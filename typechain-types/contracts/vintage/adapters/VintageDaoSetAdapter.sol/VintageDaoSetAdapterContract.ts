/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace VintageDaoSetAdapterContract {
  export type VotingParamsStruct = {
    eligibilityType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
    governors: PromiseOrValue<string>[];
    allocations: PromiseOrValue<BigNumberish>[];
  };

  export type VotingParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    BigNumber[]
  ] & {
    eligibilityType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
    governors: string[];
    allocations: BigNumber[];
  };

  export type VotingSupportInfoStruct = {
    supportType: PromiseOrValue<BigNumberish>;
    quorumType: PromiseOrValue<BigNumberish>;
    support: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
  };

  export type VotingSupportInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    supportType: BigNumber;
    quorumType: BigNumber;
    support: BigNumber;
    quorum: BigNumber;
  };

  export type VotingEligibilityInfoStruct = {
    eligibilityType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
    votingWeightedType: PromiseOrValue<BigNumberish>;
  };

  export type VotingEligibilityInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    eligibilityType: BigNumber;
    tokenAddress: string;
    tokenID: BigNumber;
    votingWeightedType: BigNumber;
  };

  export type VotingTimeInfoStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    executingPeriod: PromiseOrValue<BigNumberish>;
    creationTime: PromiseOrValue<BigNumberish>;
    stopVoteTime: PromiseOrValue<BigNumberish>;
  };

  export type VotingTimeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingPeriod: BigNumber;
    executingPeriod: BigNumber;
    creationTime: BigNumber;
    stopVoteTime: BigNumber;
  };

  export type VotingAllocsStruct = {
    allocations: PromiseOrValue<BigNumberish>[];
  };

  export type VotingAllocsStructOutput = [BigNumber[]] & {
    allocations: BigNumber[];
  };
}

export interface VintageDaoSetAdapterContractInterface extends utils.Interface {
  functions: {
    "governorMembershipProposals(address,bytes32)": FunctionFragment;
    "investorMembershipProposals(address,bytes32)": FunctionFragment;
    "isProposalAllDone(address)": FunctionFragment;
    "ongoingGovernorMembershipProposal(address)": FunctionFragment;
    "ongoingInvstorMembershipProposal(address)": FunctionFragment;
    "ongoingParticipantCapProposal(address)": FunctionFragment;
    "ongoingVotingProposal(address)": FunctionFragment;
    "participantCapProposals(address,bytes32)": FunctionFragment;
    "processGovernorMembershipProposal(address,bytes32)": FunctionFragment;
    "processInvestorMembershipProposal(address,bytes32)": FunctionFragment;
    "processParticipantCapProposal(address,bytes32)": FunctionFragment;
    "processVotingProposal(address,bytes32)": FunctionFragment;
    "submitGovernorMembershpProposal(address,bool,uint8,uint256,address,uint256,address[])": FunctionFragment;
    "submitInvestorMembershipProposal(address,bool,uint8,uint256,address,uint256,address[])": FunctionFragment;
    "submitParticipantCapProposal(address,bool,uint256)": FunctionFragment;
    "submitVotingProposal(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],uint256[]))": FunctionFragment;
    "votingProposals(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "governorMembershipProposals"
      | "investorMembershipProposals"
      | "isProposalAllDone"
      | "ongoingGovernorMembershipProposal"
      | "ongoingInvstorMembershipProposal"
      | "ongoingParticipantCapProposal"
      | "ongoingVotingProposal"
      | "participantCapProposals"
      | "processGovernorMembershipProposal"
      | "processInvestorMembershipProposal"
      | "processParticipantCapProposal"
      | "processVotingProposal"
      | "submitGovernorMembershpProposal"
      | "submitInvestorMembershipProposal"
      | "submitParticipantCapProposal"
      | "submitVotingProposal"
      | "votingProposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "governorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorMembershipProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalAllDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingGovernorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingInvstorMembershipProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingParticipantCapProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingVotingProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "participantCapProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processGovernorMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processInvestorMembershipProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processParticipantCapProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processVotingProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGovernorMembershpProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitInvestorMembershipProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitParticipantCapProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVotingProposal",
    values: [
      PromiseOrValue<string>,
      VintageDaoSetAdapterContract.VotingParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votingProposals",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "governorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorMembershipProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalAllDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingInvstorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantCapProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGovernorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processInvestorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGovernorMembershpProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitInvestorMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitParticipantCapProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVotingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingProposals",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,bytes32,uint8)": EventFragment;
    "ProposalProcessed(address,bytes32,uint8,uint256,uint128,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalProcessed"): EventFragment;
}

export interface ProposalCreatedEventObject {
  daoAddr: string;
  proposalId: string;
  pType: number;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, number],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalProcessedEventObject {
  daoAddr: string;
  proposalId: string;
  state: number;
  voteResult: BigNumber;
  allVotingWeight: BigNumber;
  nbYes: BigNumber;
  nbNo: BigNumber;
}
export type ProposalProcessedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  ProposalProcessedEventObject
>;

export type ProposalProcessedEventFilter =
  TypedEventFilter<ProposalProcessedEvent>;

export interface VintageDaoSetAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VintageDaoSetAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isProposalAllDone(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: VintageDaoSetAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        VintageDaoSetAdapterContract.VotingSupportInfoStructOutput,
        VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput,
        VintageDaoSetAdapterContract.VotingTimeInfoStructOutput,
        VintageDaoSetAdapterContract.VotingAllocsStructOutput,
        number
      ] & {
        proposalId: string;
        supportInfo: VintageDaoSetAdapterContract.VotingSupportInfoStructOutput;
        eligibilityInfo: VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput;
        timeInfo: VintageDaoSetAdapterContract.VotingTimeInfoStructOutput;
        allocs: VintageDaoSetAdapterContract.VotingAllocsStructOutput;
        state: number;
      }
    >;
  };

  governorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposalId: string;
      enable: boolean;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  investorMembershipProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      proposalId: string;
      enable: boolean;
      varifyType: number;
      minAmount: BigNumber;
      tokenAddress: string;
      tokenId: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  isProposalAllDone(
    daoAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ongoingGovernorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingInvstorMembershipProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingParticipantCapProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ongoingVotingProposal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  participantCapProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
      proposalId: string;
      enable: boolean;
      cap: BigNumber;
      creationTime: BigNumber;
      stopVoteTime: BigNumber;
      state: number;
    }
  >;

  processGovernorMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processInvestorMembershipProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processParticipantCapProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processVotingProposal(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGovernorMembershpProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    varifyType: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    whiteList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitInvestorMembershipProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    varifyType: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    whiteList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitParticipantCapProposal(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitVotingProposal(
    dao: PromiseOrValue<string>,
    params: VintageDaoSetAdapterContract.VotingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingProposals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      VintageDaoSetAdapterContract.VotingSupportInfoStructOutput,
      VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput,
      VintageDaoSetAdapterContract.VotingTimeInfoStructOutput,
      VintageDaoSetAdapterContract.VotingAllocsStructOutput,
      number
    ] & {
      proposalId: string;
      supportInfo: VintageDaoSetAdapterContract.VotingSupportInfoStructOutput;
      eligibilityInfo: VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput;
      timeInfo: VintageDaoSetAdapterContract.VotingTimeInfoStructOutput;
      allocs: VintageDaoSetAdapterContract.VotingAllocsStructOutput;
      state: number;
    }
  >;

  callStatic: {
    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        proposalId: string;
        enable: boolean;
        varifyType: number;
        minAmount: BigNumber;
        tokenAddress: string;
        tokenId: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    isProposalAllDone(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, number] & {
        proposalId: string;
        enable: boolean;
        cap: BigNumber;
        creationTime: BigNumber;
        stopVoteTime: BigNumber;
        state: number;
      }
    >;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: VintageDaoSetAdapterContract.VotingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        VintageDaoSetAdapterContract.VotingSupportInfoStructOutput,
        VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput,
        VintageDaoSetAdapterContract.VotingTimeInfoStructOutput,
        VintageDaoSetAdapterContract.VotingAllocsStructOutput,
        number
      ] & {
        proposalId: string;
        supportInfo: VintageDaoSetAdapterContract.VotingSupportInfoStructOutput;
        eligibilityInfo: VintageDaoSetAdapterContract.VotingEligibilityInfoStructOutput;
        timeInfo: VintageDaoSetAdapterContract.VotingTimeInfoStructOutput;
        allocs: VintageDaoSetAdapterContract.VotingAllocsStructOutput;
        state: number;
      }
    >;
  };

  filters: {
    "ProposalCreated(address,bytes32,uint8)"(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      daoAddr?: null,
      proposalId?: null,
      pType?: null
    ): ProposalCreatedEventFilter;

    "ProposalProcessed(address,bytes32,uint8,uint256,uint128,uint128,uint128)"(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
    ProposalProcessed(
      daoAddr?: null,
      proposalId?: null,
      state?: null,
      voteResult?: null,
      allVotingWeight?: null,
      nbYes?: null,
      nbNo?: null
    ): ProposalProcessedEventFilter;
  };

  estimateGas: {
    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalAllDone(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: VintageDaoSetAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    governorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorMembershipProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalAllDone(
      daoAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingGovernorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingInvstorMembershipProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingParticipantCapProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingVotingProposal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participantCapProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processGovernorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processParticipantCapProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processVotingProposal(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGovernorMembershpProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitInvestorMembershipProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitParticipantCapProposal(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitVotingProposal(
      dao: PromiseOrValue<string>,
      params: VintageDaoSetAdapterContract.VotingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingProposals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
