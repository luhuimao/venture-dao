/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface VintageInvestmentPaybackTokenAdapterContractInterface
  extends utils.Interface {
  functions: {
    "approvedInfos(address,bytes32,address,address)": FunctionFragment;
    "escrowInvestmentPaybackToken(uint256,address,address,address,bytes32)": FunctionFragment;
    "escrowedReturnTokens(address,bytes32,address)": FunctionFragment;
    "setFundingApprove(address,bytes32,address,uint256)": FunctionFragment;
    "withdrawInvestmentPaybackToken(address,bytes32,address,address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedInfos"
      | "escrowInvestmentPaybackToken"
      | "escrowedReturnTokens"
      | "setFundingApprove"
      | "withdrawInvestmentPaybackToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedInfos",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowInvestmentPaybackToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowedReturnTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInvestmentPaybackToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowInvestmentPaybackToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowedReturnTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInvestmentPaybackToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VintageInvestmentPaybackTokenAdapterContract
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VintageInvestmentPaybackTokenAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    escrowInvestmentPaybackToken(
      escrowAmount: PromiseOrValue<BigNumberish>,
      dao: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowedReturnTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFundingApprove(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawInvestmentPaybackToken(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approvedInfos(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrowInvestmentPaybackToken(
    escrowAmount: PromiseOrValue<BigNumberish>,
    dao: PromiseOrValue<string>,
    approver: PromiseOrValue<string>,
    erc20: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowedReturnTokens(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFundingApprove(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawInvestmentPaybackToken(
    dao: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BytesLike>,
    erc20: PromiseOrValue<string>,
    approver: PromiseOrValue<string>,
    state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowInvestmentPaybackToken(
      escrowAmount: PromiseOrValue<BigNumberish>,
      dao: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    escrowedReturnTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFundingApprove(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawInvestmentPaybackToken(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approvedInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowInvestmentPaybackToken(
      escrowAmount: PromiseOrValue<BigNumberish>,
      dao: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowedReturnTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFundingApprove(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawInvestmentPaybackToken(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedInfos(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowInvestmentPaybackToken(
      escrowAmount: PromiseOrValue<BigNumberish>,
      dao: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowedReturnTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFundingApprove(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawInvestmentPaybackToken(
      dao: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BytesLike>,
      erc20: PromiseOrValue<string>,
      approver: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
