/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface VintageDaoSetHelperAdapterContractInterface
  extends utils.Interface {
  functions: {
    "setGovernorMembership(address,bool,string,uint256,uint256,uint256,address,address[])": FunctionFragment;
    "setInvestorCap(address,bool,uint256)": FunctionFragment;
    "setInvestorMembership(address,bool,string,uint256,uint256,uint256,address,address[])": FunctionFragment;
    "setVoting(address,uint256[9],address,uint256[],address[])": FunctionFragment;
    "unDoneOperationProposalsCheck(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setGovernorMembership"
      | "setInvestorCap"
      | "setInvestorMembership"
      | "setVoting"
      | "unDoneOperationProposalsCheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setGovernorMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorCap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unDoneOperationProposalsCheck",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setGovernorMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unDoneOperationProposalsCheck",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VintageDaoSetHelperAdapterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VintageDaoSetHelperAdapterContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInvestorCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoting(
      dao: PromiseOrValue<string>,
      uint256Params: PromiseOrValue<BigNumberish>[],
      tokenAddress: PromiseOrValue<string>,
      allocs: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unDoneOperationProposalsCheck(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  setGovernorMembership(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    name: PromiseOrValue<string>,
    varifyType: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInvestorCap(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInvestorMembership(
    dao: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    name: PromiseOrValue<string>,
    varifyType: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoting(
    dao: PromiseOrValue<string>,
    uint256Params: PromiseOrValue<BigNumberish>[],
    tokenAddress: PromiseOrValue<string>,
    allocs: PromiseOrValue<BigNumberish>[],
    governors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unDoneOperationProposalsCheck(
    dao: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVoting(
      dao: PromiseOrValue<string>,
      uint256Params: PromiseOrValue<BigNumberish>[],
      tokenAddress: PromiseOrValue<string>,
      allocs: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    unDoneOperationProposalsCheck(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInvestorCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoting(
      dao: PromiseOrValue<string>,
      uint256Params: PromiseOrValue<BigNumberish>[],
      tokenAddress: PromiseOrValue<string>,
      allocs: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unDoneOperationProposalsCheck(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setGovernorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInvestorCap(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInvestorMembership(
      dao: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      name: PromiseOrValue<string>,
      varifyType: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoting(
      dao: PromiseOrValue<string>,
      uint256Params: PromiseOrValue<BigNumberish>[],
      tokenAddress: PromiseOrValue<string>,
      allocs: PromiseOrValue<BigNumberish>[],
      governors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unDoneOperationProposalsCheck(
      dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
